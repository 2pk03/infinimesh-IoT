// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package apipb

import (
	context "context"
	nodepb "github.com/slntopp/infinimesh/pkg/node/nodepb"
	registrypb "github.com/slntopp/infinimesh/pkg/registry/registrypb"
	shadowpb "github.com/slntopp/infinimesh/pkg/shadow/shadowpb"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DevicesClient is the client API for Devices service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DevicesClient interface {
	Create(ctx context.Context, in *registrypb.CreateRequest, opts ...grpc.CallOption) (*registrypb.CreateResponse, error)
	Update(ctx context.Context, in *registrypb.UpdateRequest, opts ...grpc.CallOption) (*registrypb.UpdateResponse, error)
	Get(ctx context.Context, in *registrypb.GetRequest, opts ...grpc.CallOption) (*registrypb.GetResponse, error)
	List(ctx context.Context, in *ListDevicesRequest, opts ...grpc.CallOption) (*registrypb.ListResponse, error)
	Delete(ctx context.Context, in *registrypb.DeleteRequest, opts ...grpc.CallOption) (*registrypb.DeleteResponse, error)
	AssignOwnerDevices(ctx context.Context, in *registrypb.OwnershipRequestDevices, opts ...grpc.CallOption) (*registrypb.OwnershipResponseDevices, error)
	RemoveOwnerDevices(ctx context.Context, in *registrypb.OwnershipRequestDevices, opts ...grpc.CallOption) (*registrypb.OwnershipResponseDevices, error)
}

type devicesClient struct {
	cc grpc.ClientConnInterface
}

func NewDevicesClient(cc grpc.ClientConnInterface) DevicesClient {
	return &devicesClient{cc}
}

func (c *devicesClient) Create(ctx context.Context, in *registrypb.CreateRequest, opts ...grpc.CallOption) (*registrypb.CreateResponse, error) {
	out := new(registrypb.CreateResponse)
	err := c.cc.Invoke(ctx, "/infinimesh.api.Devices/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devicesClient) Update(ctx context.Context, in *registrypb.UpdateRequest, opts ...grpc.CallOption) (*registrypb.UpdateResponse, error) {
	out := new(registrypb.UpdateResponse)
	err := c.cc.Invoke(ctx, "/infinimesh.api.Devices/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devicesClient) Get(ctx context.Context, in *registrypb.GetRequest, opts ...grpc.CallOption) (*registrypb.GetResponse, error) {
	out := new(registrypb.GetResponse)
	err := c.cc.Invoke(ctx, "/infinimesh.api.Devices/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devicesClient) List(ctx context.Context, in *ListDevicesRequest, opts ...grpc.CallOption) (*registrypb.ListResponse, error) {
	out := new(registrypb.ListResponse)
	err := c.cc.Invoke(ctx, "/infinimesh.api.Devices/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devicesClient) Delete(ctx context.Context, in *registrypb.DeleteRequest, opts ...grpc.CallOption) (*registrypb.DeleteResponse, error) {
	out := new(registrypb.DeleteResponse)
	err := c.cc.Invoke(ctx, "/infinimesh.api.Devices/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devicesClient) AssignOwnerDevices(ctx context.Context, in *registrypb.OwnershipRequestDevices, opts ...grpc.CallOption) (*registrypb.OwnershipResponseDevices, error) {
	out := new(registrypb.OwnershipResponseDevices)
	err := c.cc.Invoke(ctx, "/infinimesh.api.Devices/AssignOwnerDevices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devicesClient) RemoveOwnerDevices(ctx context.Context, in *registrypb.OwnershipRequestDevices, opts ...grpc.CallOption) (*registrypb.OwnershipResponseDevices, error) {
	out := new(registrypb.OwnershipResponseDevices)
	err := c.cc.Invoke(ctx, "/infinimesh.api.Devices/RemoveOwnerDevices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DevicesServer is the server API for Devices service.
// All implementations must embed UnimplementedDevicesServer
// for forward compatibility
type DevicesServer interface {
	Create(context.Context, *registrypb.CreateRequest) (*registrypb.CreateResponse, error)
	Update(context.Context, *registrypb.UpdateRequest) (*registrypb.UpdateResponse, error)
	Get(context.Context, *registrypb.GetRequest) (*registrypb.GetResponse, error)
	List(context.Context, *ListDevicesRequest) (*registrypb.ListResponse, error)
	Delete(context.Context, *registrypb.DeleteRequest) (*registrypb.DeleteResponse, error)
	AssignOwnerDevices(context.Context, *registrypb.OwnershipRequestDevices) (*registrypb.OwnershipResponseDevices, error)
	RemoveOwnerDevices(context.Context, *registrypb.OwnershipRequestDevices) (*registrypb.OwnershipResponseDevices, error)
	mustEmbedUnimplementedDevicesServer()
}

// UnimplementedDevicesServer must be embedded to have forward compatible implementations.
type UnimplementedDevicesServer struct {
}

func (UnimplementedDevicesServer) Create(context.Context, *registrypb.CreateRequest) (*registrypb.CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedDevicesServer) Update(context.Context, *registrypb.UpdateRequest) (*registrypb.UpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedDevicesServer) Get(context.Context, *registrypb.GetRequest) (*registrypb.GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedDevicesServer) List(context.Context, *ListDevicesRequest) (*registrypb.ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedDevicesServer) Delete(context.Context, *registrypb.DeleteRequest) (*registrypb.DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedDevicesServer) AssignOwnerDevices(context.Context, *registrypb.OwnershipRequestDevices) (*registrypb.OwnershipResponseDevices, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignOwnerDevices not implemented")
}
func (UnimplementedDevicesServer) RemoveOwnerDevices(context.Context, *registrypb.OwnershipRequestDevices) (*registrypb.OwnershipResponseDevices, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveOwnerDevices not implemented")
}
func (UnimplementedDevicesServer) mustEmbedUnimplementedDevicesServer() {}

// UnsafeDevicesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DevicesServer will
// result in compilation errors.
type UnsafeDevicesServer interface {
	mustEmbedUnimplementedDevicesServer()
}

func RegisterDevicesServer(s grpc.ServiceRegistrar, srv DevicesServer) {
	s.RegisterService(&Devices_ServiceDesc, srv)
}

func _Devices_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(registrypb.CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevicesServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infinimesh.api.Devices/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevicesServer).Create(ctx, req.(*registrypb.CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Devices_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(registrypb.UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevicesServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infinimesh.api.Devices/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevicesServer).Update(ctx, req.(*registrypb.UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Devices_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(registrypb.GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevicesServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infinimesh.api.Devices/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevicesServer).Get(ctx, req.(*registrypb.GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Devices_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDevicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevicesServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infinimesh.api.Devices/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevicesServer).List(ctx, req.(*ListDevicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Devices_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(registrypb.DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevicesServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infinimesh.api.Devices/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevicesServer).Delete(ctx, req.(*registrypb.DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Devices_AssignOwnerDevices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(registrypb.OwnershipRequestDevices)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevicesServer).AssignOwnerDevices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infinimesh.api.Devices/AssignOwnerDevices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevicesServer).AssignOwnerDevices(ctx, req.(*registrypb.OwnershipRequestDevices))
	}
	return interceptor(ctx, in, info, handler)
}

func _Devices_RemoveOwnerDevices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(registrypb.OwnershipRequestDevices)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevicesServer).RemoveOwnerDevices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infinimesh.api.Devices/RemoveOwnerDevices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevicesServer).RemoveOwnerDevices(ctx, req.(*registrypb.OwnershipRequestDevices))
	}
	return interceptor(ctx, in, info, handler)
}

// Devices_ServiceDesc is the grpc.ServiceDesc for Devices service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Devices_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "infinimesh.api.Devices",
	HandlerType: (*DevicesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Devices_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Devices_Update_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Devices_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Devices_List_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Devices_Delete_Handler,
		},
		{
			MethodName: "AssignOwnerDevices",
			Handler:    _Devices_AssignOwnerDevices_Handler,
		},
		{
			MethodName: "RemoveOwnerDevices",
			Handler:    _Devices_RemoveOwnerDevices_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/apiserver/apipb/api.proto",
}

// StatesClient is the client API for States service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StatesClient interface {
	Get(ctx context.Context, in *shadowpb.GetRequest, opts ...grpc.CallOption) (*shadowpb.GetResponse, error)
	GetForNS(ctx context.Context, in *shadowpb.GetRequest, opts ...grpc.CallOption) (*shadowpb.GetForNSResponse, error)
	PatchDesiredState(ctx context.Context, in *shadowpb.PatchDesiredStateRequest, opts ...grpc.CallOption) (*shadowpb.PatchDesiredStateResponse, error)
	StreamReportedStateChanges(ctx context.Context, in *shadowpb.StreamReportedStateChangesRequest, opts ...grpc.CallOption) (States_StreamReportedStateChangesClient, error)
}

type statesClient struct {
	cc grpc.ClientConnInterface
}

func NewStatesClient(cc grpc.ClientConnInterface) StatesClient {
	return &statesClient{cc}
}

func (c *statesClient) Get(ctx context.Context, in *shadowpb.GetRequest, opts ...grpc.CallOption) (*shadowpb.GetResponse, error) {
	out := new(shadowpb.GetResponse)
	err := c.cc.Invoke(ctx, "/infinimesh.api.States/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statesClient) GetForNS(ctx context.Context, in *shadowpb.GetRequest, opts ...grpc.CallOption) (*shadowpb.GetForNSResponse, error) {
	out := new(shadowpb.GetForNSResponse)
	err := c.cc.Invoke(ctx, "/infinimesh.api.States/GetForNS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statesClient) PatchDesiredState(ctx context.Context, in *shadowpb.PatchDesiredStateRequest, opts ...grpc.CallOption) (*shadowpb.PatchDesiredStateResponse, error) {
	out := new(shadowpb.PatchDesiredStateResponse)
	err := c.cc.Invoke(ctx, "/infinimesh.api.States/PatchDesiredState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statesClient) StreamReportedStateChanges(ctx context.Context, in *shadowpb.StreamReportedStateChangesRequest, opts ...grpc.CallOption) (States_StreamReportedStateChangesClient, error) {
	stream, err := c.cc.NewStream(ctx, &States_ServiceDesc.Streams[0], "/infinimesh.api.States/StreamReportedStateChanges", opts...)
	if err != nil {
		return nil, err
	}
	x := &statesStreamReportedStateChangesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type States_StreamReportedStateChangesClient interface {
	Recv() (*shadowpb.StreamReportedStateChangesResponse, error)
	grpc.ClientStream
}

type statesStreamReportedStateChangesClient struct {
	grpc.ClientStream
}

func (x *statesStreamReportedStateChangesClient) Recv() (*shadowpb.StreamReportedStateChangesResponse, error) {
	m := new(shadowpb.StreamReportedStateChangesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StatesServer is the server API for States service.
// All implementations must embed UnimplementedStatesServer
// for forward compatibility
type StatesServer interface {
	Get(context.Context, *shadowpb.GetRequest) (*shadowpb.GetResponse, error)
	GetForNS(context.Context, *shadowpb.GetRequest) (*shadowpb.GetForNSResponse, error)
	PatchDesiredState(context.Context, *shadowpb.PatchDesiredStateRequest) (*shadowpb.PatchDesiredStateResponse, error)
	StreamReportedStateChanges(*shadowpb.StreamReportedStateChangesRequest, States_StreamReportedStateChangesServer) error
	mustEmbedUnimplementedStatesServer()
}

// UnimplementedStatesServer must be embedded to have forward compatible implementations.
type UnimplementedStatesServer struct {
}

func (UnimplementedStatesServer) Get(context.Context, *shadowpb.GetRequest) (*shadowpb.GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedStatesServer) GetForNS(context.Context, *shadowpb.GetRequest) (*shadowpb.GetForNSResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetForNS not implemented")
}
func (UnimplementedStatesServer) PatchDesiredState(context.Context, *shadowpb.PatchDesiredStateRequest) (*shadowpb.PatchDesiredStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchDesiredState not implemented")
}
func (UnimplementedStatesServer) StreamReportedStateChanges(*shadowpb.StreamReportedStateChangesRequest, States_StreamReportedStateChangesServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamReportedStateChanges not implemented")
}
func (UnimplementedStatesServer) mustEmbedUnimplementedStatesServer() {}

// UnsafeStatesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StatesServer will
// result in compilation errors.
type UnsafeStatesServer interface {
	mustEmbedUnimplementedStatesServer()
}

func RegisterStatesServer(s grpc.ServiceRegistrar, srv StatesServer) {
	s.RegisterService(&States_ServiceDesc, srv)
}

func _States_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(shadowpb.GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatesServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infinimesh.api.States/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatesServer).Get(ctx, req.(*shadowpb.GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _States_GetForNS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(shadowpb.GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatesServer).GetForNS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infinimesh.api.States/GetForNS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatesServer).GetForNS(ctx, req.(*shadowpb.GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _States_PatchDesiredState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(shadowpb.PatchDesiredStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatesServer).PatchDesiredState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infinimesh.api.States/PatchDesiredState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatesServer).PatchDesiredState(ctx, req.(*shadowpb.PatchDesiredStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _States_StreamReportedStateChanges_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(shadowpb.StreamReportedStateChangesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StatesServer).StreamReportedStateChanges(m, &statesStreamReportedStateChangesServer{stream})
}

type States_StreamReportedStateChangesServer interface {
	Send(*shadowpb.StreamReportedStateChangesResponse) error
	grpc.ServerStream
}

type statesStreamReportedStateChangesServer struct {
	grpc.ServerStream
}

func (x *statesStreamReportedStateChangesServer) Send(m *shadowpb.StreamReportedStateChangesResponse) error {
	return x.ServerStream.SendMsg(m)
}

// States_ServiceDesc is the grpc.ServiceDesc for States service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var States_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "infinimesh.api.States",
	HandlerType: (*StatesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _States_Get_Handler,
		},
		{
			MethodName: "GetForNS",
			Handler:    _States_GetForNS_Handler,
		},
		{
			MethodName: "PatchDesiredState",
			Handler:    _States_PatchDesiredState_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamReportedStateChanges",
			Handler:       _States_StreamReportedStateChanges_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pkg/apiserver/apipb/api.proto",
}

// AccountsClient is the client API for Accounts service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AccountsClient interface {
	SelfAccount(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*nodepb.Account, error)
	Token(ctx context.Context, in *TokenRequest, opts ...grpc.CallOption) (*TokenResponse, error)
	CreateUserAccount(ctx context.Context, in *nodepb.CreateUserAccountRequest, opts ...grpc.CallOption) (*nodepb.CreateUserAccountResponse, error)
	GetAccount(ctx context.Context, in *nodepb.GetAccountRequest, opts ...grpc.CallOption) (*nodepb.Account, error)
	UpdateAccount(ctx context.Context, in *nodepb.UpdateAccountRequest, opts ...grpc.CallOption) (*nodepb.UpdateAccountResponse, error)
	ListAccounts(ctx context.Context, in *nodepb.ListAccountsRequest, opts ...grpc.CallOption) (*nodepb.ListAccountsResponse, error)
	DeleteAccount(ctx context.Context, in *nodepb.DeleteAccountRequest, opts ...grpc.CallOption) (*nodepb.DeleteAccountResponse, error)
	AssignOwner(ctx context.Context, in *nodepb.OwnershipRequest, opts ...grpc.CallOption) (*nodepb.OwnershipResponse, error)
	RemoveOwner(ctx context.Context, in *nodepb.OwnershipRequest, opts ...grpc.CallOption) (*nodepb.OwnershipResponse, error)
}

type accountsClient struct {
	cc grpc.ClientConnInterface
}

func NewAccountsClient(cc grpc.ClientConnInterface) AccountsClient {
	return &accountsClient{cc}
}

func (c *accountsClient) SelfAccount(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*nodepb.Account, error) {
	out := new(nodepb.Account)
	err := c.cc.Invoke(ctx, "/infinimesh.api.Accounts/SelfAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsClient) Token(ctx context.Context, in *TokenRequest, opts ...grpc.CallOption) (*TokenResponse, error) {
	out := new(TokenResponse)
	err := c.cc.Invoke(ctx, "/infinimesh.api.Accounts/Token", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsClient) CreateUserAccount(ctx context.Context, in *nodepb.CreateUserAccountRequest, opts ...grpc.CallOption) (*nodepb.CreateUserAccountResponse, error) {
	out := new(nodepb.CreateUserAccountResponse)
	err := c.cc.Invoke(ctx, "/infinimesh.api.Accounts/CreateUserAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsClient) GetAccount(ctx context.Context, in *nodepb.GetAccountRequest, opts ...grpc.CallOption) (*nodepb.Account, error) {
	out := new(nodepb.Account)
	err := c.cc.Invoke(ctx, "/infinimesh.api.Accounts/GetAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsClient) UpdateAccount(ctx context.Context, in *nodepb.UpdateAccountRequest, opts ...grpc.CallOption) (*nodepb.UpdateAccountResponse, error) {
	out := new(nodepb.UpdateAccountResponse)
	err := c.cc.Invoke(ctx, "/infinimesh.api.Accounts/UpdateAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsClient) ListAccounts(ctx context.Context, in *nodepb.ListAccountsRequest, opts ...grpc.CallOption) (*nodepb.ListAccountsResponse, error) {
	out := new(nodepb.ListAccountsResponse)
	err := c.cc.Invoke(ctx, "/infinimesh.api.Accounts/ListAccounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsClient) DeleteAccount(ctx context.Context, in *nodepb.DeleteAccountRequest, opts ...grpc.CallOption) (*nodepb.DeleteAccountResponse, error) {
	out := new(nodepb.DeleteAccountResponse)
	err := c.cc.Invoke(ctx, "/infinimesh.api.Accounts/DeleteAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsClient) AssignOwner(ctx context.Context, in *nodepb.OwnershipRequest, opts ...grpc.CallOption) (*nodepb.OwnershipResponse, error) {
	out := new(nodepb.OwnershipResponse)
	err := c.cc.Invoke(ctx, "/infinimesh.api.Accounts/AssignOwner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsClient) RemoveOwner(ctx context.Context, in *nodepb.OwnershipRequest, opts ...grpc.CallOption) (*nodepb.OwnershipResponse, error) {
	out := new(nodepb.OwnershipResponse)
	err := c.cc.Invoke(ctx, "/infinimesh.api.Accounts/RemoveOwner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccountsServer is the server API for Accounts service.
// All implementations must embed UnimplementedAccountsServer
// for forward compatibility
type AccountsServer interface {
	SelfAccount(context.Context, *emptypb.Empty) (*nodepb.Account, error)
	Token(context.Context, *TokenRequest) (*TokenResponse, error)
	CreateUserAccount(context.Context, *nodepb.CreateUserAccountRequest) (*nodepb.CreateUserAccountResponse, error)
	GetAccount(context.Context, *nodepb.GetAccountRequest) (*nodepb.Account, error)
	UpdateAccount(context.Context, *nodepb.UpdateAccountRequest) (*nodepb.UpdateAccountResponse, error)
	ListAccounts(context.Context, *nodepb.ListAccountsRequest) (*nodepb.ListAccountsResponse, error)
	DeleteAccount(context.Context, *nodepb.DeleteAccountRequest) (*nodepb.DeleteAccountResponse, error)
	AssignOwner(context.Context, *nodepb.OwnershipRequest) (*nodepb.OwnershipResponse, error)
	RemoveOwner(context.Context, *nodepb.OwnershipRequest) (*nodepb.OwnershipResponse, error)
	mustEmbedUnimplementedAccountsServer()
}

// UnimplementedAccountsServer must be embedded to have forward compatible implementations.
type UnimplementedAccountsServer struct {
}

func (UnimplementedAccountsServer) SelfAccount(context.Context, *emptypb.Empty) (*nodepb.Account, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelfAccount not implemented")
}
func (UnimplementedAccountsServer) Token(context.Context, *TokenRequest) (*TokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Token not implemented")
}
func (UnimplementedAccountsServer) CreateUserAccount(context.Context, *nodepb.CreateUserAccountRequest) (*nodepb.CreateUserAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserAccount not implemented")
}
func (UnimplementedAccountsServer) GetAccount(context.Context, *nodepb.GetAccountRequest) (*nodepb.Account, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccount not implemented")
}
func (UnimplementedAccountsServer) UpdateAccount(context.Context, *nodepb.UpdateAccountRequest) (*nodepb.UpdateAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAccount not implemented")
}
func (UnimplementedAccountsServer) ListAccounts(context.Context, *nodepb.ListAccountsRequest) (*nodepb.ListAccountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAccounts not implemented")
}
func (UnimplementedAccountsServer) DeleteAccount(context.Context, *nodepb.DeleteAccountRequest) (*nodepb.DeleteAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAccount not implemented")
}
func (UnimplementedAccountsServer) AssignOwner(context.Context, *nodepb.OwnershipRequest) (*nodepb.OwnershipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignOwner not implemented")
}
func (UnimplementedAccountsServer) RemoveOwner(context.Context, *nodepb.OwnershipRequest) (*nodepb.OwnershipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveOwner not implemented")
}
func (UnimplementedAccountsServer) mustEmbedUnimplementedAccountsServer() {}

// UnsafeAccountsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccountsServer will
// result in compilation errors.
type UnsafeAccountsServer interface {
	mustEmbedUnimplementedAccountsServer()
}

func RegisterAccountsServer(s grpc.ServiceRegistrar, srv AccountsServer) {
	s.RegisterService(&Accounts_ServiceDesc, srv)
}

func _Accounts_SelfAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsServer).SelfAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infinimesh.api.Accounts/SelfAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsServer).SelfAccount(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Accounts_Token_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsServer).Token(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infinimesh.api.Accounts/Token",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsServer).Token(ctx, req.(*TokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Accounts_CreateUserAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(nodepb.CreateUserAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsServer).CreateUserAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infinimesh.api.Accounts/CreateUserAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsServer).CreateUserAccount(ctx, req.(*nodepb.CreateUserAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Accounts_GetAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(nodepb.GetAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsServer).GetAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infinimesh.api.Accounts/GetAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsServer).GetAccount(ctx, req.(*nodepb.GetAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Accounts_UpdateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(nodepb.UpdateAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsServer).UpdateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infinimesh.api.Accounts/UpdateAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsServer).UpdateAccount(ctx, req.(*nodepb.UpdateAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Accounts_ListAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(nodepb.ListAccountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsServer).ListAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infinimesh.api.Accounts/ListAccounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsServer).ListAccounts(ctx, req.(*nodepb.ListAccountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Accounts_DeleteAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(nodepb.DeleteAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsServer).DeleteAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infinimesh.api.Accounts/DeleteAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsServer).DeleteAccount(ctx, req.(*nodepb.DeleteAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Accounts_AssignOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(nodepb.OwnershipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsServer).AssignOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infinimesh.api.Accounts/AssignOwner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsServer).AssignOwner(ctx, req.(*nodepb.OwnershipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Accounts_RemoveOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(nodepb.OwnershipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsServer).RemoveOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infinimesh.api.Accounts/RemoveOwner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsServer).RemoveOwner(ctx, req.(*nodepb.OwnershipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Accounts_ServiceDesc is the grpc.ServiceDesc for Accounts service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Accounts_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "infinimesh.api.Accounts",
	HandlerType: (*AccountsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SelfAccount",
			Handler:    _Accounts_SelfAccount_Handler,
		},
		{
			MethodName: "Token",
			Handler:    _Accounts_Token_Handler,
		},
		{
			MethodName: "CreateUserAccount",
			Handler:    _Accounts_CreateUserAccount_Handler,
		},
		{
			MethodName: "GetAccount",
			Handler:    _Accounts_GetAccount_Handler,
		},
		{
			MethodName: "UpdateAccount",
			Handler:    _Accounts_UpdateAccount_Handler,
		},
		{
			MethodName: "ListAccounts",
			Handler:    _Accounts_ListAccounts_Handler,
		},
		{
			MethodName: "DeleteAccount",
			Handler:    _Accounts_DeleteAccount_Handler,
		},
		{
			MethodName: "AssignOwner",
			Handler:    _Accounts_AssignOwner_Handler,
		},
		{
			MethodName: "RemoveOwner",
			Handler:    _Accounts_RemoveOwner_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/apiserver/apipb/api.proto",
}

// ObjectsClient is the client API for Objects service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ObjectsClient interface {
	ListObjects(ctx context.Context, in *ListObjectsRequest, opts ...grpc.CallOption) (*nodepb.ListObjectsResponse, error)
	CreateObject(ctx context.Context, in *CreateObjectRequest, opts ...grpc.CallOption) (*nodepb.Object, error)
	DeleteObject(ctx context.Context, in *nodepb.DeleteObjectRequest, opts ...grpc.CallOption) (*nodepb.DeleteObjectResponse, error)
}

type objectsClient struct {
	cc grpc.ClientConnInterface
}

func NewObjectsClient(cc grpc.ClientConnInterface) ObjectsClient {
	return &objectsClient{cc}
}

func (c *objectsClient) ListObjects(ctx context.Context, in *ListObjectsRequest, opts ...grpc.CallOption) (*nodepb.ListObjectsResponse, error) {
	out := new(nodepb.ListObjectsResponse)
	err := c.cc.Invoke(ctx, "/infinimesh.api.Objects/ListObjects", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectsClient) CreateObject(ctx context.Context, in *CreateObjectRequest, opts ...grpc.CallOption) (*nodepb.Object, error) {
	out := new(nodepb.Object)
	err := c.cc.Invoke(ctx, "/infinimesh.api.Objects/CreateObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectsClient) DeleteObject(ctx context.Context, in *nodepb.DeleteObjectRequest, opts ...grpc.CallOption) (*nodepb.DeleteObjectResponse, error) {
	out := new(nodepb.DeleteObjectResponse)
	err := c.cc.Invoke(ctx, "/infinimesh.api.Objects/DeleteObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ObjectsServer is the server API for Objects service.
// All implementations must embed UnimplementedObjectsServer
// for forward compatibility
type ObjectsServer interface {
	ListObjects(context.Context, *ListObjectsRequest) (*nodepb.ListObjectsResponse, error)
	CreateObject(context.Context, *CreateObjectRequest) (*nodepb.Object, error)
	DeleteObject(context.Context, *nodepb.DeleteObjectRequest) (*nodepb.DeleteObjectResponse, error)
	mustEmbedUnimplementedObjectsServer()
}

// UnimplementedObjectsServer must be embedded to have forward compatible implementations.
type UnimplementedObjectsServer struct {
}

func (UnimplementedObjectsServer) ListObjects(context.Context, *ListObjectsRequest) (*nodepb.ListObjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListObjects not implemented")
}
func (UnimplementedObjectsServer) CreateObject(context.Context, *CreateObjectRequest) (*nodepb.Object, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateObject not implemented")
}
func (UnimplementedObjectsServer) DeleteObject(context.Context, *nodepb.DeleteObjectRequest) (*nodepb.DeleteObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteObject not implemented")
}
func (UnimplementedObjectsServer) mustEmbedUnimplementedObjectsServer() {}

// UnsafeObjectsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ObjectsServer will
// result in compilation errors.
type UnsafeObjectsServer interface {
	mustEmbedUnimplementedObjectsServer()
}

func RegisterObjectsServer(s grpc.ServiceRegistrar, srv ObjectsServer) {
	s.RegisterService(&Objects_ServiceDesc, srv)
}

func _Objects_ListObjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListObjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectsServer).ListObjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infinimesh.api.Objects/ListObjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectsServer).ListObjects(ctx, req.(*ListObjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Objects_CreateObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectsServer).CreateObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infinimesh.api.Objects/CreateObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectsServer).CreateObject(ctx, req.(*CreateObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Objects_DeleteObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(nodepb.DeleteObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectsServer).DeleteObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infinimesh.api.Objects/DeleteObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectsServer).DeleteObject(ctx, req.(*nodepb.DeleteObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Objects_ServiceDesc is the grpc.ServiceDesc for Objects service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Objects_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "infinimesh.api.Objects",
	HandlerType: (*ObjectsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListObjects",
			Handler:    _Objects_ListObjects_Handler,
		},
		{
			MethodName: "CreateObject",
			Handler:    _Objects_CreateObject_Handler,
		},
		{
			MethodName: "DeleteObject",
			Handler:    _Objects_DeleteObject_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/apiserver/apipb/api.proto",
}

// NamespacesClient is the client API for Namespaces service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NamespacesClient interface {
	CreateNamespace(ctx context.Context, in *nodepb.CreateNamespaceRequest, opts ...grpc.CallOption) (*nodepb.Namespace, error)
	GetNamespace(ctx context.Context, in *nodepb.GetNamespaceRequest, opts ...grpc.CallOption) (*nodepb.Namespace, error)
	ListNamespaces(ctx context.Context, in *nodepb.ListNamespacesRequest, opts ...grpc.CallOption) (*nodepb.ListNamespacesResponse, error)
	CreatePermission(ctx context.Context, in *CreateNamespacePermissionRequest, opts ...grpc.CallOption) (*CreateNamespacePermissionResponse, error)
	ListPermissions(ctx context.Context, in *nodepb.ListPermissionsRequest, opts ...grpc.CallOption) (*nodepb.ListPermissionsResponse, error)
	DeletePermission(ctx context.Context, in *nodepb.DeletePermissionRequest, opts ...grpc.CallOption) (*nodepb.DeletePermissionResponse, error)
	DeleteNamespace(ctx context.Context, in *nodepb.DeleteNamespaceRequest, opts ...grpc.CallOption) (*nodepb.DeleteNamespaceResponse, error)
	UpdateNamespace(ctx context.Context, in *nodepb.UpdateNamespaceRequest, opts ...grpc.CallOption) (*nodepb.UpdateNamespaceResponse, error)
}

type namespacesClient struct {
	cc grpc.ClientConnInterface
}

func NewNamespacesClient(cc grpc.ClientConnInterface) NamespacesClient {
	return &namespacesClient{cc}
}

func (c *namespacesClient) CreateNamespace(ctx context.Context, in *nodepb.CreateNamespaceRequest, opts ...grpc.CallOption) (*nodepb.Namespace, error) {
	out := new(nodepb.Namespace)
	err := c.cc.Invoke(ctx, "/infinimesh.api.Namespaces/CreateNamespace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespacesClient) GetNamespace(ctx context.Context, in *nodepb.GetNamespaceRequest, opts ...grpc.CallOption) (*nodepb.Namespace, error) {
	out := new(nodepb.Namespace)
	err := c.cc.Invoke(ctx, "/infinimesh.api.Namespaces/GetNamespace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespacesClient) ListNamespaces(ctx context.Context, in *nodepb.ListNamespacesRequest, opts ...grpc.CallOption) (*nodepb.ListNamespacesResponse, error) {
	out := new(nodepb.ListNamespacesResponse)
	err := c.cc.Invoke(ctx, "/infinimesh.api.Namespaces/ListNamespaces", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespacesClient) CreatePermission(ctx context.Context, in *CreateNamespacePermissionRequest, opts ...grpc.CallOption) (*CreateNamespacePermissionResponse, error) {
	out := new(CreateNamespacePermissionResponse)
	err := c.cc.Invoke(ctx, "/infinimesh.api.Namespaces/CreatePermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespacesClient) ListPermissions(ctx context.Context, in *nodepb.ListPermissionsRequest, opts ...grpc.CallOption) (*nodepb.ListPermissionsResponse, error) {
	out := new(nodepb.ListPermissionsResponse)
	err := c.cc.Invoke(ctx, "/infinimesh.api.Namespaces/ListPermissions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespacesClient) DeletePermission(ctx context.Context, in *nodepb.DeletePermissionRequest, opts ...grpc.CallOption) (*nodepb.DeletePermissionResponse, error) {
	out := new(nodepb.DeletePermissionResponse)
	err := c.cc.Invoke(ctx, "/infinimesh.api.Namespaces/DeletePermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespacesClient) DeleteNamespace(ctx context.Context, in *nodepb.DeleteNamespaceRequest, opts ...grpc.CallOption) (*nodepb.DeleteNamespaceResponse, error) {
	out := new(nodepb.DeleteNamespaceResponse)
	err := c.cc.Invoke(ctx, "/infinimesh.api.Namespaces/DeleteNamespace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespacesClient) UpdateNamespace(ctx context.Context, in *nodepb.UpdateNamespaceRequest, opts ...grpc.CallOption) (*nodepb.UpdateNamespaceResponse, error) {
	out := new(nodepb.UpdateNamespaceResponse)
	err := c.cc.Invoke(ctx, "/infinimesh.api.Namespaces/UpdateNamespace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NamespacesServer is the server API for Namespaces service.
// All implementations must embed UnimplementedNamespacesServer
// for forward compatibility
type NamespacesServer interface {
	CreateNamespace(context.Context, *nodepb.CreateNamespaceRequest) (*nodepb.Namespace, error)
	GetNamespace(context.Context, *nodepb.GetNamespaceRequest) (*nodepb.Namespace, error)
	ListNamespaces(context.Context, *nodepb.ListNamespacesRequest) (*nodepb.ListNamespacesResponse, error)
	CreatePermission(context.Context, *CreateNamespacePermissionRequest) (*CreateNamespacePermissionResponse, error)
	ListPermissions(context.Context, *nodepb.ListPermissionsRequest) (*nodepb.ListPermissionsResponse, error)
	DeletePermission(context.Context, *nodepb.DeletePermissionRequest) (*nodepb.DeletePermissionResponse, error)
	DeleteNamespace(context.Context, *nodepb.DeleteNamespaceRequest) (*nodepb.DeleteNamespaceResponse, error)
	UpdateNamespace(context.Context, *nodepb.UpdateNamespaceRequest) (*nodepb.UpdateNamespaceResponse, error)
	mustEmbedUnimplementedNamespacesServer()
}

// UnimplementedNamespacesServer must be embedded to have forward compatible implementations.
type UnimplementedNamespacesServer struct {
}

func (UnimplementedNamespacesServer) CreateNamespace(context.Context, *nodepb.CreateNamespaceRequest) (*nodepb.Namespace, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNamespace not implemented")
}
func (UnimplementedNamespacesServer) GetNamespace(context.Context, *nodepb.GetNamespaceRequest) (*nodepb.Namespace, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNamespace not implemented")
}
func (UnimplementedNamespacesServer) ListNamespaces(context.Context, *nodepb.ListNamespacesRequest) (*nodepb.ListNamespacesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNamespaces not implemented")
}
func (UnimplementedNamespacesServer) CreatePermission(context.Context, *CreateNamespacePermissionRequest) (*CreateNamespacePermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePermission not implemented")
}
func (UnimplementedNamespacesServer) ListPermissions(context.Context, *nodepb.ListPermissionsRequest) (*nodepb.ListPermissionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPermissions not implemented")
}
func (UnimplementedNamespacesServer) DeletePermission(context.Context, *nodepb.DeletePermissionRequest) (*nodepb.DeletePermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePermission not implemented")
}
func (UnimplementedNamespacesServer) DeleteNamespace(context.Context, *nodepb.DeleteNamespaceRequest) (*nodepb.DeleteNamespaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNamespace not implemented")
}
func (UnimplementedNamespacesServer) UpdateNamespace(context.Context, *nodepb.UpdateNamespaceRequest) (*nodepb.UpdateNamespaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNamespace not implemented")
}
func (UnimplementedNamespacesServer) mustEmbedUnimplementedNamespacesServer() {}

// UnsafeNamespacesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NamespacesServer will
// result in compilation errors.
type UnsafeNamespacesServer interface {
	mustEmbedUnimplementedNamespacesServer()
}

func RegisterNamespacesServer(s grpc.ServiceRegistrar, srv NamespacesServer) {
	s.RegisterService(&Namespaces_ServiceDesc, srv)
}

func _Namespaces_CreateNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(nodepb.CreateNamespaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamespacesServer).CreateNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infinimesh.api.Namespaces/CreateNamespace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamespacesServer).CreateNamespace(ctx, req.(*nodepb.CreateNamespaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Namespaces_GetNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(nodepb.GetNamespaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamespacesServer).GetNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infinimesh.api.Namespaces/GetNamespace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamespacesServer).GetNamespace(ctx, req.(*nodepb.GetNamespaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Namespaces_ListNamespaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(nodepb.ListNamespacesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamespacesServer).ListNamespaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infinimesh.api.Namespaces/ListNamespaces",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamespacesServer).ListNamespaces(ctx, req.(*nodepb.ListNamespacesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Namespaces_CreatePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNamespacePermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamespacesServer).CreatePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infinimesh.api.Namespaces/CreatePermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamespacesServer).CreatePermission(ctx, req.(*CreateNamespacePermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Namespaces_ListPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(nodepb.ListPermissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamespacesServer).ListPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infinimesh.api.Namespaces/ListPermissions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamespacesServer).ListPermissions(ctx, req.(*nodepb.ListPermissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Namespaces_DeletePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(nodepb.DeletePermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamespacesServer).DeletePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infinimesh.api.Namespaces/DeletePermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamespacesServer).DeletePermission(ctx, req.(*nodepb.DeletePermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Namespaces_DeleteNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(nodepb.DeleteNamespaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamespacesServer).DeleteNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infinimesh.api.Namespaces/DeleteNamespace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamespacesServer).DeleteNamespace(ctx, req.(*nodepb.DeleteNamespaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Namespaces_UpdateNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(nodepb.UpdateNamespaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamespacesServer).UpdateNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infinimesh.api.Namespaces/UpdateNamespace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamespacesServer).UpdateNamespace(ctx, req.(*nodepb.UpdateNamespaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Namespaces_ServiceDesc is the grpc.ServiceDesc for Namespaces service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Namespaces_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "infinimesh.api.Namespaces",
	HandlerType: (*NamespacesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateNamespace",
			Handler:    _Namespaces_CreateNamespace_Handler,
		},
		{
			MethodName: "GetNamespace",
			Handler:    _Namespaces_GetNamespace_Handler,
		},
		{
			MethodName: "ListNamespaces",
			Handler:    _Namespaces_ListNamespaces_Handler,
		},
		{
			MethodName: "CreatePermission",
			Handler:    _Namespaces_CreatePermission_Handler,
		},
		{
			MethodName: "ListPermissions",
			Handler:    _Namespaces_ListPermissions_Handler,
		},
		{
			MethodName: "DeletePermission",
			Handler:    _Namespaces_DeletePermission_Handler,
		},
		{
			MethodName: "DeleteNamespace",
			Handler:    _Namespaces_DeleteNamespace_Handler,
		},
		{
			MethodName: "UpdateNamespace",
			Handler:    _Namespaces_UpdateNamespace_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/apiserver/apipb/api.proto",
}
