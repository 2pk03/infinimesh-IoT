syntax = "proto3";

package infinimesh.api;

option go_package = "apipb";

import "pkg/registry/registrypb/device_registry.proto";
import "pkg/shadow/shadowpb/shadow.proto";
import "pkg/node/nodepb/node.proto";
import "protoc-gen-swagger/options/annotations.proto";
import "google/api/annotations.proto";

option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
  host : "api.infinimesh.io";
info : {
title:
  "Infinimesh IoT Platform";
description:
  "Cloud Native IoT Platform";
version:
  "0.0.1";
contact : {
name:
  "Infinimesh";
url:
  "http://infinimesh.io";
email:
  "joe@infinimesh.io";
};
};
schemes : HTTPS;
consumes : "application/json";
produces : "application/json";
}
;

message TokenRequest {
  string username = 1;
  string password = 2;
}

message TokenResponse { string token = 1; }

service Devices {
  rpc Create(infinimesh.deviceregistry.CreateRequest)
      returns (infinimesh.deviceregistry.CreateResponse) {
    option (google.api.http) = {
      post : "/devices"
      body : "device"
    };
  };
  rpc Update(infinimesh.deviceregistry.UpdateRequest)
      returns (infinimesh.deviceregistry.UpdateResponse) {
    option (google.api.http) = {
      patch : "/devices/{device.id}"
      body : "device"
      additional_bindings {put : "/devices/{device.id}" body : "device"}
    };
  };
  rpc Get(infinimesh.deviceregistry.GetRequest)
      returns (infinimesh.deviceregistry.GetResponse) {
    option (google.api.http) = {
      get : "/devices/{id}"
    };
  };
  rpc List(infinimesh.deviceregistry.ListDevicesRequest)
      returns (infinimesh.deviceregistry.ListResponse) {
    option (google.api.http) = {
      get : "/devices"
    };
  }
  rpc Delete(infinimesh.deviceregistry.DeleteRequest)
      returns (infinimesh.deviceregistry.DeleteResponse) {
    option (google.api.http) = {
      delete : "/devices/{id}"
    };
  };
}

service Shadows {
  rpc Get(infinimesh.shadow.GetRequest)
      returns (infinimesh.shadow.GetResponse) {
    option (google.api.http) = {
      get : "/devices/{id}/shadow"
    };
  };
  rpc PatchDesiredState(infinimesh.shadow.PatchDesiredStateRequest)
      returns (infinimesh.shadow.PatchDesiredStateResponse) {
    option (google.api.http) = {
      post : "/devices/{id}/shadow/desired"
      body : "data"
    };
  }
  rpc StreamReportedStateChanges(
      infinimesh.shadow.StreamReportedStateChangesRequest)
      returns (stream infinimesh.shadow.StreamReportedStateChangesResponse) {
    option (google.api.http) = {
      get : "/devices/{id}/shadow/reported"
    };
  }
}

service Account {
  rpc Token(TokenRequest) returns (TokenResponse) {
    option (google.api.http) = {
      post : "/token"
      body: "*"
    };
  };
}

message ListObjectsRequest{} // Don't use infinimesh.node.ListObjectsRequest,
                             // because it allows the caller to set the account
                             // id. however, here we don't allow this. the
                             // account id will be derived from the JWT token,
                             // and the user can not choose it.

service ObjectService {
  rpc ListObjects(ListObjectsRequest)
      returns (infinimesh.node.ListObjectsResponse) {
    option (google.api.http) = {
      get : "/objects"
    };
  };
}