// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pkg/apiserver/apipb/api.proto

package apipb

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	nodepb "github.com/infinimesh/infinimesh/pkg/node/nodepb"
	registrypb "github.com/infinimesh/infinimesh/pkg/registry/registrypb"
	shadowpb "github.com/infinimesh/infinimesh/pkg/shadow/shadowpb"
	context "golang.org/x/net/context"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type TokenRequest struct {
	Username             string   `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Password             string   `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TokenRequest) Reset()         { *m = TokenRequest{} }
func (m *TokenRequest) String() string { return proto.CompactTextString(m) }
func (*TokenRequest) ProtoMessage()    {}
func (*TokenRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_06a22a27722afd30, []int{0}
}

func (m *TokenRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TokenRequest.Unmarshal(m, b)
}
func (m *TokenRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TokenRequest.Marshal(b, m, deterministic)
}
func (m *TokenRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TokenRequest.Merge(m, src)
}
func (m *TokenRequest) XXX_Size() int {
	return xxx_messageInfo_TokenRequest.Size(m)
}
func (m *TokenRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TokenRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TokenRequest proto.InternalMessageInfo

func (m *TokenRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *TokenRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type TokenResponse struct {
	Token                string   `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TokenResponse) Reset()         { *m = TokenResponse{} }
func (m *TokenResponse) String() string { return proto.CompactTextString(m) }
func (*TokenResponse) ProtoMessage()    {}
func (*TokenResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_06a22a27722afd30, []int{1}
}

func (m *TokenResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TokenResponse.Unmarshal(m, b)
}
func (m *TokenResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TokenResponse.Marshal(b, m, deterministic)
}
func (m *TokenResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TokenResponse.Merge(m, src)
}
func (m *TokenResponse) XXX_Size() int {
	return xxx_messageInfo_TokenResponse.Size(m)
}
func (m *TokenResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TokenResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TokenResponse proto.InternalMessageInfo

func (m *TokenResponse) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

// TODO how to list direct access grants
type ListObjectsRequest struct {
	Namespace            string   `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListObjectsRequest) Reset()         { *m = ListObjectsRequest{} }
func (m *ListObjectsRequest) String() string { return proto.CompactTextString(m) }
func (*ListObjectsRequest) ProtoMessage()    {}
func (*ListObjectsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_06a22a27722afd30, []int{2}
}

func (m *ListObjectsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListObjectsRequest.Unmarshal(m, b)
}
func (m *ListObjectsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListObjectsRequest.Marshal(b, m, deterministic)
}
func (m *ListObjectsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListObjectsRequest.Merge(m, src)
}
func (m *ListObjectsRequest) XXX_Size() int {
	return xxx_messageInfo_ListObjectsRequest.Size(m)
}
func (m *ListObjectsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListObjectsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListObjectsRequest proto.InternalMessageInfo

func (m *ListObjectsRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

type CreateObjectRequest struct {
	Parent               string   `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Namespace            string   `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateObjectRequest) Reset()         { *m = CreateObjectRequest{} }
func (m *CreateObjectRequest) String() string { return proto.CompactTextString(m) }
func (*CreateObjectRequest) ProtoMessage()    {}
func (*CreateObjectRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_06a22a27722afd30, []int{3}
}

func (m *CreateObjectRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateObjectRequest.Unmarshal(m, b)
}
func (m *CreateObjectRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateObjectRequest.Marshal(b, m, deterministic)
}
func (m *CreateObjectRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateObjectRequest.Merge(m, src)
}
func (m *CreateObjectRequest) XXX_Size() int {
	return xxx_messageInfo_CreateObjectRequest.Size(m)
}
func (m *CreateObjectRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateObjectRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateObjectRequest proto.InternalMessageInfo

func (m *CreateObjectRequest) GetParent() string {
	if m != nil {
		return m.Parent
	}
	return ""
}

func (m *CreateObjectRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateObjectRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func init() {
	proto.RegisterType((*TokenRequest)(nil), "infinimesh.api.TokenRequest")
	proto.RegisterType((*TokenResponse)(nil), "infinimesh.api.TokenResponse")
	proto.RegisterType((*ListObjectsRequest)(nil), "infinimesh.api.ListObjectsRequest")
	proto.RegisterType((*CreateObjectRequest)(nil), "infinimesh.api.CreateObjectRequest")
}

func init() { proto.RegisterFile("pkg/apiserver/apipb/api.proto", fileDescriptor_06a22a27722afd30) }

var fileDescriptor_06a22a27722afd30 = []byte{
	// 1071 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x97, 0xdd, 0x6e, 0x1b, 0x45,
	0x14, 0xc7, 0xb5, 0x4e, 0xec, 0xa4, 0x93, 0xf4, 0xc3, 0xa7, 0x51, 0x93, 0xae, 0x9c, 0xc6, 0x6c,
	0xea, 0xa6, 0x38, 0xb5, 0x37, 0x75, 0x29, 0x12, 0x16, 0x17, 0xa4, 0x09, 0x44, 0x15, 0xa8, 0x44,
	0x49, 0x2b, 0xa4, 0x0a, 0x09, 0x8d, 0x77, 0x27, 0xf6, 0xa6, 0xf6, 0xce, 0x66, 0x67, 0x9c, 0x08,
	0xa2, 0x88, 0x8a, 0x4a, 0x5c, 0x70, 0x59, 0xde, 0x01, 0x89, 0x1b, 0xde, 0x81, 0x67, 0xe0, 0x86,
	0xde, 0x22, 0x24, 0x5e, 0x03, 0xcd, 0xc7, 0xae, 0xd7, 0x5e, 0x6f, 0xec, 0xde, 0xc4, 0xbb, 0x73,
	0xfe, 0x33, 0xff, 0xdf, 0xcc, 0x39, 0x9e, 0xe3, 0xa0, 0xd5, 0xe0, 0x55, 0xdb, 0xc6, 0x81, 0xc7,
	0x48, 0x78, 0x4a, 0x42, 0xf1, 0x14, 0xb4, 0xc4, 0xdf, 0x7a, 0x10, 0x52, 0x4e, 0xe1, 0x9a, 0xe7,
	0x1f, 0x79, 0xbe, 0xd7, 0x23, 0xac, 0x53, 0xc7, 0x81, 0x67, 0x96, 0xda, 0x94, 0xb6, 0xbb, 0x44,
	0x28, 0x6c, 0xec, 0xfb, 0x94, 0x63, 0xee, 0x51, 0x9f, 0x29, 0xb5, 0xb9, 0x26, 0x16, 0xf3, 0xa9,
	0x4b, 0xe4, 0x9f, 0xa0, 0x65, 0xfb, 0xb8, 0x47, 0x58, 0x80, 0x1d, 0xa2, 0x05, 0x66, 0x4a, 0x40,
	0xdd, 0x28, 0x56, 0x13, 0xb1, 0x90, 0xb4, 0x3d, 0xc6, 0xc3, 0xef, 0xe3, 0x87, 0xa0, 0x65, 0xbb,
	0xe4, 0xd4, 0x73, 0xc8, 0x77, 0xd1, 0x88, 0x96, 0x97, 0x85, 0x9c, 0x75, 0xb0, 0x4b, 0xcf, 0xf4,
	0x47, 0xd0, 0xd2, 0x0f, 0x5a, 0xf1, 0x40, 0x7e, 0x38, 0xb5, 0x36, 0xf1, 0x6b, 0xec, 0x0c, 0xb7,
	0xdb, 0x24, 0xb4, 0x69, 0x20, 0x79, 0xd3, 0xec, 0xd6, 0x17, 0x68, 0xf1, 0x39, 0x7d, 0x45, 0xfc,
	0x03, 0x72, 0xd2, 0x27, 0x8c, 0x83, 0x89, 0xe6, 0xfb, 0x8c, 0x84, 0x62, 0x07, 0x2b, 0x46, 0xd9,
	0xb8, 0x7f, 0xe5, 0x20, 0x7e, 0x17, 0xb1, 0x00, 0x33, 0x76, 0x46, 0x43, 0x77, 0x25, 0xa7, 0x62,
	0xd1, 0xbb, 0x55, 0x41, 0x57, 0xf5, 0x3a, 0x2c, 0xa0, 0x3e, 0x23, 0xb0, 0x84, 0xf2, 0x5c, 0x0c,
	0xe8, 0x55, 0xd4, 0x8b, 0xd5, 0x40, 0xf0, 0x95, 0xc7, 0xf8, 0xd7, 0xad, 0x63, 0xe2, 0x70, 0x16,
	0x99, 0x96, 0xd0, 0x95, 0xf8, 0xc8, 0xb4, 0x7e, 0x30, 0x60, 0xbd, 0x36, 0xd0, 0xcd, 0x9d, 0x90,
	0x60, 0x4e, 0xd4, 0xb4, 0x68, 0xd6, 0x2d, 0x54, 0x08, 0x70, 0x48, 0x7c, 0xae, 0xa7, 0xe8, 0x37,
	0x00, 0x34, 0x2b, 0xf1, 0x15, 0xa2, 0x7c, 0x1e, 0x76, 0x98, 0x19, 0x71, 0x68, 0xae, 0xbd, 0xdd,
	0x2e, 0x35, 0x4c, 0x58, 0x39, 0xb7, 0xc4, 0x98, 0xd5, 0x94, 0x1f, 0x65, 0x7a, 0x54, 0x76, 0x3a,
	0x5e, 0xd7, 0xb5, 0x2e, 0x1a, 0xef, 0xf2, 0x68, 0x6e, 0x57, 0xe6, 0x83, 0xc1, 0xcf, 0x06, 0x2a,
	0x28, 0x1c, 0xb8, 0x5f, 0x4f, 0xd4, 0x89, 0xca, 0x57, 0x9c, 0x2e, 0x25, 0xd1, 0xac, 0xe6, 0x87,
	0x53, 0x28, 0xd5, 0xc1, 0x59, 0x1b, 0x3f, 0xfd, 0xf5, 0xef, 0xaf, 0xb9, 0x0f, 0xac, 0xe5, 0x41,
	0x19, 0x31, 0xfb, 0x3c, 0x7e, 0xbe, 0x68, 0x16, 0xd4, 0x7c, 0xf8, 0xd3, 0x40, 0x85, 0x17, 0x81,
	0x3b, 0x09, 0x44, 0x49, 0xa6, 0x01, 0x89, 0x94, 0x1a, 0xa4, 0x25, 0x41, 0xbe, 0x6d, 0xac, 0x67,
	0x80, 0xd8, 0xe7, 0x6a, 0x7e, 0xdd, 0x73, 0x63, 0xa8, 0x97, 0x35, 0xf3, 0x7d, 0xe4, 0xf0, 0x03,
	0x9a, 0xd9, 0x23, 0x1c, 0x2a, 0x97, 0x50, 0xed, 0x91, 0x28, 0xe3, 0xe6, 0xbd, 0x49, 0x32, 0x4d,
	0x7e, 0x57, 0x92, 0xdf, 0x81, 0x52, 0x26, 0x8a, 0xe7, 0x5e, 0xc0, 0x8f, 0x68, 0x56, 0xd4, 0x22,
	0xd4, 0x2e, 0x59, 0x55, 0x08, 0x74, 0xe2, 0x23, 0x88, 0x8d, 0x09, 0xf2, 0x98, 0x62, 0x4d, 0x52,
	0xdc, 0x86, 0xac, 0x44, 0xc2, 0x1b, 0x03, 0x15, 0x76, 0x49, 0x97, 0x4c, 0x48, 0xa0, 0x92, 0x4c,
	0x93, 0xc0, 0x48, 0x39, 0x7c, 0x0c, 0xd5, 0x4b, 0x8f, 0xa1, 0xf1, 0x66, 0x16, 0xcd, 0x1d, 0xca,
	0x0b, 0x84, 0xc1, 0x89, 0x4a, 0xc7, 0x6a, 0xd2, 0x43, 0x5f, 0x2e, 0x89, 0x34, 0xdc, 0xc9, 0x0a,
	0x6b, 0xdf, 0x4d, 0xe9, 0x5b, 0x81, 0xf5, 0xcb, 0x7c, 0xf5, 0xa5, 0x05, 0xbf, 0x1b, 0xa8, 0xb8,
	0x8f, 0xb9, 0xd3, 0xd9, 0x25, 0xcc, 0x0b, 0x89, 0x7b, 0xc8, 0x45, 0x41, 0x6f, 0x8e, 0xb1, 0x48,
	0xa9, 0x22, 0x9e, 0x07, 0xd3, 0x89, 0x35, 0xdd, 0x27, 0x92, 0xee, 0x91, 0xb5, 0x39, 0x05, 0x9d,
	0xed, 0xaa, 0x15, 0x9a, 0xb3, 0x2e, 0xe6, 0x18, 0xfe, 0x36, 0x90, 0x79, 0xc8, 0x43, 0x82, 0x7b,
	0x07, 0x24, 0xa0, 0x21, 0xd7, 0x4b, 0xef, 0x74, 0xb0, 0xdf, 0x26, 0x0c, 0x3e, 0x1a, 0xc3, 0x91,
	0x2d, 0x8f, 0xe8, 0x1f, 0xbf, 0xe7, 0x2c, 0xbd, 0x8d, 0x2f, 0xe5, 0x36, 0x3e, 0x87, 0x9d, 0xac,
	0x6d, 0x4c, 0xb1, 0xbb, 0x50, 0x1b, 0x6c, 0x19, 0x8d, 0x7f, 0x72, 0x68, 0x7e, 0xdb, 0x71, 0x68,
	0xdf, 0xe7, 0x0c, 0xbe, 0x41, 0x79, 0x79, 0x99, 0x43, 0xa9, 0x3e, 0xdc, 0x08, 0xeb, 0xc9, 0x5e,
	0x61, 0xae, 0x66, 0x44, 0x35, 0x61, 0x51, 0x12, 0x2e, 0x58, 0x05, 0x5b, 0xde, 0xfd, 0x4d, 0xa3,
	0x2a, 0xee, 0xce, 0xa2, 0xba, 0xee, 0x5e, 0x30, 0x12, 0x6a, 0x3f, 0x18, 0x2a, 0x69, 0xd9, 0x1a,
	0x53, 0x9a, 0xc8, 0xb2, 0x3a, 0x8d, 0x54, 0xfb, 0x9b, 0xd2, 0x7f, 0xc9, 0xba, 0x6e, 0x63, 0xbd,
	0x31, 0x5b, 0xb4, 0x32, 0x26, 0x40, 0x38, 0x5a, 0x14, 0xdf, 0xd5, 0x78, 0xc7, 0x77, 0x53, 0xeb,
	0x26, 0xc3, 0x91, 0x7b, 0x65, 0x82, 0x4a, 0x1b, 0x2f, 0x4b, 0xe3, 0x22, 0x8c, 0x1a, 0x37, 0x7e,
	0x9b, 0x41, 0x73, 0xba, 0xf5, 0xc1, 0x6b, 0x03, 0x2d, 0x24, 0x5a, 0x21, 0x58, 0xa3, 0x87, 0x99,
	0xee, 0x93, 0xe6, 0x78, 0xca, 0x58, 0x34, 0xdc, 0x40, 0x60, 0x2d, 0xab, 0x04, 0xa8, 0xb6, 0xfc,
	0xc5, 0x40, 0x8b, 0xc9, 0xc6, 0x0a, 0xeb, 0xa3, 0x0c, 0x63, 0xda, 0xae, 0xb9, 0x9c, 0x82, 0x50,
	0x71, 0xeb, 0x53, 0xe9, 0xfb, 0xb1, 0xf5, 0x70, 0x82, 0xaf, 0x7d, 0xae, 0x1a, 0xf5, 0x85, 0x2d,
	0xdb, 0x6b, 0xa8, 0x4a, 0x43, 0xc0, 0xa8, 0xfb, 0x4b, 0xc3, 0xa4, 0x37, 0x9b, 0x0c, 0x67, 0xa7,
	0x64, 0x58, 0xa5, 0xcf, 0xa4, 0x26, 0xd9, 0x36, 0xaa, 0x95, 0x89, 0x6c, 0x7d, 0x71, 0x27, 0xfe,
	0x97, 0x43, 0xe8, 0x59, 0x2c, 0x04, 0x1f, 0x5d, 0x57, 0x27, 0x11, 0x8f, 0xc1, 0x46, 0x46, 0x21,
	0xc6, 0x8a, 0x08, 0xd0, 0x4c, 0x09, 0x63, 0x89, 0x75, 0x4b, 0x52, 0xdd, 0xb0, 0x16, 0x12, 0x54,
	0xe2, 0x2c, 0x4e, 0xd0, 0xe2, 0x1e, 0xe1, 0x03, 0xb3, 0xf4, 0x51, 0x24, 0xc3, 0xd3, 0x38, 0x4d,
	0xec, 0x45, 0xa7, 0xe8, 0x9a, 0xa8, 0xa5, 0xc4, 0xa6, 0xef, 0x8d, 0x2d, 0xb6, 0x81, 0x60, 0x6c,
	0x3f, 0x1c, 0xab, 0xd3, 0x39, 0xb8, 0x29, 0x19, 0xae, 0x42, 0x72, 0xb7, 0x4f, 0xde, 0x19, 0x6f,
	0xb7, 0xff, 0x30, 0x20, 0x44, 0xcb, 0x4f, 0xe3, 0x55, 0xca, 0x4f, 0xe9, 0xf3, 0xf2, 0x7e, 0x17,
	0xf3, 0x23, 0x1a, 0xf6, 0xe0, 0xf6, 0x4e, 0x97, 0xf6, 0xdd, 0xf2, 0x33, 0xcc, 0xbd, 0x53, 0x32,
	0x14, 0xb2, 0x1e, 0x23, 0x34, 0x98, 0x05, 0x4b, 0x1d, 0xce, 0x83, 0xa6, 0x6d, 0x27, 0x70, 0x3c,
	0x6a, 0x16, 0x8f, 0x29, 0xf9, 0x6c, 0x68, 0xa8, 0x91, 0xdf, 0xaa, 0x6f, 0xd5, 0x1f, 0x9a, 0x45,
	0x51, 0xe1, 0x43, 0x91, 0xaa, 0x91, 0x6b, 0xdc, 0xc0, 0x41, 0xd0, 0xf5, 0x1c, 0xf9, 0x23, 0xd9,
	0x3e, 0x66, 0xd4, 0x6f, 0xa6, 0x46, 0x10, 0x38, 0xb4, 0x37, 0xf2, 0x55, 0x79, 0x32, 0xbf, 0x1d,
	0x78, 0xfb, 0xe2, 0x27, 0xf5, 0xbe, 0xf1, 0x32, 0x2f, 0xff, 0x9f, 0x68, 0x15, 0xe4, 0x4f, 0xec,
	0x47, 0xff, 0x07, 0x00, 0x00, 0xff, 0xff, 0xb8, 0xd5, 0x54, 0x32, 0x6d, 0x0c, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DevicesClient is the client API for Devices service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DevicesClient interface {
	Create(ctx context.Context, in *registrypb.CreateRequest, opts ...grpc.CallOption) (*registrypb.CreateResponse, error)
	Update(ctx context.Context, in *registrypb.UpdateRequest, opts ...grpc.CallOption) (*registrypb.UpdateResponse, error)
	Get(ctx context.Context, in *registrypb.GetRequest, opts ...grpc.CallOption) (*registrypb.GetResponse, error)
	List(ctx context.Context, in *registrypb.ListDevicesRequest, opts ...grpc.CallOption) (*registrypb.ListResponse, error)
	Delete(ctx context.Context, in *registrypb.DeleteRequest, opts ...grpc.CallOption) (*registrypb.DeleteResponse, error)
}

type devicesClient struct {
	cc *grpc.ClientConn
}

func NewDevicesClient(cc *grpc.ClientConn) DevicesClient {
	return &devicesClient{cc}
}

func (c *devicesClient) Create(ctx context.Context, in *registrypb.CreateRequest, opts ...grpc.CallOption) (*registrypb.CreateResponse, error) {
	out := new(registrypb.CreateResponse)
	err := c.cc.Invoke(ctx, "/infinimesh.api.Devices/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devicesClient) Update(ctx context.Context, in *registrypb.UpdateRequest, opts ...grpc.CallOption) (*registrypb.UpdateResponse, error) {
	out := new(registrypb.UpdateResponse)
	err := c.cc.Invoke(ctx, "/infinimesh.api.Devices/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devicesClient) Get(ctx context.Context, in *registrypb.GetRequest, opts ...grpc.CallOption) (*registrypb.GetResponse, error) {
	out := new(registrypb.GetResponse)
	err := c.cc.Invoke(ctx, "/infinimesh.api.Devices/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devicesClient) List(ctx context.Context, in *registrypb.ListDevicesRequest, opts ...grpc.CallOption) (*registrypb.ListResponse, error) {
	out := new(registrypb.ListResponse)
	err := c.cc.Invoke(ctx, "/infinimesh.api.Devices/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devicesClient) Delete(ctx context.Context, in *registrypb.DeleteRequest, opts ...grpc.CallOption) (*registrypb.DeleteResponse, error) {
	out := new(registrypb.DeleteResponse)
	err := c.cc.Invoke(ctx, "/infinimesh.api.Devices/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DevicesServer is the server API for Devices service.
type DevicesServer interface {
	Create(context.Context, *registrypb.CreateRequest) (*registrypb.CreateResponse, error)
	Update(context.Context, *registrypb.UpdateRequest) (*registrypb.UpdateResponse, error)
	Get(context.Context, *registrypb.GetRequest) (*registrypb.GetResponse, error)
	List(context.Context, *registrypb.ListDevicesRequest) (*registrypb.ListResponse, error)
	Delete(context.Context, *registrypb.DeleteRequest) (*registrypb.DeleteResponse, error)
}

func RegisterDevicesServer(s *grpc.Server, srv DevicesServer) {
	s.RegisterService(&_Devices_serviceDesc, srv)
}

func _Devices_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(registrypb.CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevicesServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infinimesh.api.Devices/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevicesServer).Create(ctx, req.(*registrypb.CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Devices_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(registrypb.UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevicesServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infinimesh.api.Devices/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevicesServer).Update(ctx, req.(*registrypb.UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Devices_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(registrypb.GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevicesServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infinimesh.api.Devices/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevicesServer).Get(ctx, req.(*registrypb.GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Devices_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(registrypb.ListDevicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevicesServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infinimesh.api.Devices/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevicesServer).List(ctx, req.(*registrypb.ListDevicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Devices_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(registrypb.DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevicesServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infinimesh.api.Devices/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevicesServer).Delete(ctx, req.(*registrypb.DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Devices_serviceDesc = grpc.ServiceDesc{
	ServiceName: "infinimesh.api.Devices",
	HandlerType: (*DevicesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Devices_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Devices_Update_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Devices_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Devices_List_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Devices_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/apiserver/apipb/api.proto",
}

// ShadowsClient is the client API for Shadows service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ShadowsClient interface {
	Get(ctx context.Context, in *shadowpb.GetRequest, opts ...grpc.CallOption) (*shadowpb.GetResponse, error)
	PatchDesiredState(ctx context.Context, in *shadowpb.PatchDesiredStateRequest, opts ...grpc.CallOption) (*shadowpb.PatchDesiredStateResponse, error)
	StreamReportedStateChanges(ctx context.Context, in *shadowpb.StreamReportedStateChangesRequest, opts ...grpc.CallOption) (Shadows_StreamReportedStateChangesClient, error)
}

type shadowsClient struct {
	cc *grpc.ClientConn
}

func NewShadowsClient(cc *grpc.ClientConn) ShadowsClient {
	return &shadowsClient{cc}
}

func (c *shadowsClient) Get(ctx context.Context, in *shadowpb.GetRequest, opts ...grpc.CallOption) (*shadowpb.GetResponse, error) {
	out := new(shadowpb.GetResponse)
	err := c.cc.Invoke(ctx, "/infinimesh.api.Shadows/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shadowsClient) PatchDesiredState(ctx context.Context, in *shadowpb.PatchDesiredStateRequest, opts ...grpc.CallOption) (*shadowpb.PatchDesiredStateResponse, error) {
	out := new(shadowpb.PatchDesiredStateResponse)
	err := c.cc.Invoke(ctx, "/infinimesh.api.Shadows/PatchDesiredState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shadowsClient) StreamReportedStateChanges(ctx context.Context, in *shadowpb.StreamReportedStateChangesRequest, opts ...grpc.CallOption) (Shadows_StreamReportedStateChangesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Shadows_serviceDesc.Streams[0], "/infinimesh.api.Shadows/StreamReportedStateChanges", opts...)
	if err != nil {
		return nil, err
	}
	x := &shadowsStreamReportedStateChangesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Shadows_StreamReportedStateChangesClient interface {
	Recv() (*shadowpb.StreamReportedStateChangesResponse, error)
	grpc.ClientStream
}

type shadowsStreamReportedStateChangesClient struct {
	grpc.ClientStream
}

func (x *shadowsStreamReportedStateChangesClient) Recv() (*shadowpb.StreamReportedStateChangesResponse, error) {
	m := new(shadowpb.StreamReportedStateChangesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ShadowsServer is the server API for Shadows service.
type ShadowsServer interface {
	Get(context.Context, *shadowpb.GetRequest) (*shadowpb.GetResponse, error)
	PatchDesiredState(context.Context, *shadowpb.PatchDesiredStateRequest) (*shadowpb.PatchDesiredStateResponse, error)
	StreamReportedStateChanges(*shadowpb.StreamReportedStateChangesRequest, Shadows_StreamReportedStateChangesServer) error
}

func RegisterShadowsServer(s *grpc.Server, srv ShadowsServer) {
	s.RegisterService(&_Shadows_serviceDesc, srv)
}

func _Shadows_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(shadowpb.GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShadowsServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infinimesh.api.Shadows/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShadowsServer).Get(ctx, req.(*shadowpb.GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shadows_PatchDesiredState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(shadowpb.PatchDesiredStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShadowsServer).PatchDesiredState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infinimesh.api.Shadows/PatchDesiredState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShadowsServer).PatchDesiredState(ctx, req.(*shadowpb.PatchDesiredStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shadows_StreamReportedStateChanges_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(shadowpb.StreamReportedStateChangesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ShadowsServer).StreamReportedStateChanges(m, &shadowsStreamReportedStateChangesServer{stream})
}

type Shadows_StreamReportedStateChangesServer interface {
	Send(*shadowpb.StreamReportedStateChangesResponse) error
	grpc.ServerStream
}

type shadowsStreamReportedStateChangesServer struct {
	grpc.ServerStream
}

func (x *shadowsStreamReportedStateChangesServer) Send(m *shadowpb.StreamReportedStateChangesResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _Shadows_serviceDesc = grpc.ServiceDesc{
	ServiceName: "infinimesh.api.Shadows",
	HandlerType: (*ShadowsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _Shadows_Get_Handler,
		},
		{
			MethodName: "PatchDesiredState",
			Handler:    _Shadows_PatchDesiredState_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamReportedStateChanges",
			Handler:       _Shadows_StreamReportedStateChanges_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pkg/apiserver/apipb/api.proto",
}

// AccountsClient is the client API for Accounts service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AccountsClient interface {
	Token(ctx context.Context, in *TokenRequest, opts ...grpc.CallOption) (*TokenResponse, error)
	CreateUserAccount(ctx context.Context, in *nodepb.CreateUserAccountRequest, opts ...grpc.CallOption) (*nodepb.CreateUserAccountResponse, error)
	ListAccounts(ctx context.Context, in *nodepb.ListAccountsRequest, opts ...grpc.CallOption) (*nodepb.ListAccountsResponse, error)
}

type accountsClient struct {
	cc *grpc.ClientConn
}

func NewAccountsClient(cc *grpc.ClientConn) AccountsClient {
	return &accountsClient{cc}
}

func (c *accountsClient) Token(ctx context.Context, in *TokenRequest, opts ...grpc.CallOption) (*TokenResponse, error) {
	out := new(TokenResponse)
	err := c.cc.Invoke(ctx, "/infinimesh.api.Accounts/Token", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsClient) CreateUserAccount(ctx context.Context, in *nodepb.CreateUserAccountRequest, opts ...grpc.CallOption) (*nodepb.CreateUserAccountResponse, error) {
	out := new(nodepb.CreateUserAccountResponse)
	err := c.cc.Invoke(ctx, "/infinimesh.api.Accounts/CreateUserAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsClient) ListAccounts(ctx context.Context, in *nodepb.ListAccountsRequest, opts ...grpc.CallOption) (*nodepb.ListAccountsResponse, error) {
	out := new(nodepb.ListAccountsResponse)
	err := c.cc.Invoke(ctx, "/infinimesh.api.Accounts/ListAccounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccountsServer is the server API for Accounts service.
type AccountsServer interface {
	Token(context.Context, *TokenRequest) (*TokenResponse, error)
	CreateUserAccount(context.Context, *nodepb.CreateUserAccountRequest) (*nodepb.CreateUserAccountResponse, error)
	ListAccounts(context.Context, *nodepb.ListAccountsRequest) (*nodepb.ListAccountsResponse, error)
}

func RegisterAccountsServer(s *grpc.Server, srv AccountsServer) {
	s.RegisterService(&_Accounts_serviceDesc, srv)
}

func _Accounts_Token_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsServer).Token(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infinimesh.api.Accounts/Token",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsServer).Token(ctx, req.(*TokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Accounts_CreateUserAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(nodepb.CreateUserAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsServer).CreateUserAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infinimesh.api.Accounts/CreateUserAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsServer).CreateUserAccount(ctx, req.(*nodepb.CreateUserAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Accounts_ListAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(nodepb.ListAccountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsServer).ListAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infinimesh.api.Accounts/ListAccounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsServer).ListAccounts(ctx, req.(*nodepb.ListAccountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Accounts_serviceDesc = grpc.ServiceDesc{
	ServiceName: "infinimesh.api.Accounts",
	HandlerType: (*AccountsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Token",
			Handler:    _Accounts_Token_Handler,
		},
		{
			MethodName: "CreateUserAccount",
			Handler:    _Accounts_CreateUserAccount_Handler,
		},
		{
			MethodName: "ListAccounts",
			Handler:    _Accounts_ListAccounts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/apiserver/apipb/api.proto",
}

// ObjectsClient is the client API for Objects service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ObjectsClient interface {
	ListObjects(ctx context.Context, in *ListObjectsRequest, opts ...grpc.CallOption) (*nodepb.ListObjectsResponse, error)
	CreateObject(ctx context.Context, in *CreateObjectRequest, opts ...grpc.CallOption) (*nodepb.Object, error)
	DeleteObject(ctx context.Context, in *nodepb.DeleteObjectRequest, opts ...grpc.CallOption) (*nodepb.DeleteObjectResponse, error)
}

type objectsClient struct {
	cc *grpc.ClientConn
}

func NewObjectsClient(cc *grpc.ClientConn) ObjectsClient {
	return &objectsClient{cc}
}

func (c *objectsClient) ListObjects(ctx context.Context, in *ListObjectsRequest, opts ...grpc.CallOption) (*nodepb.ListObjectsResponse, error) {
	out := new(nodepb.ListObjectsResponse)
	err := c.cc.Invoke(ctx, "/infinimesh.api.Objects/ListObjects", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectsClient) CreateObject(ctx context.Context, in *CreateObjectRequest, opts ...grpc.CallOption) (*nodepb.Object, error) {
	out := new(nodepb.Object)
	err := c.cc.Invoke(ctx, "/infinimesh.api.Objects/CreateObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectsClient) DeleteObject(ctx context.Context, in *nodepb.DeleteObjectRequest, opts ...grpc.CallOption) (*nodepb.DeleteObjectResponse, error) {
	out := new(nodepb.DeleteObjectResponse)
	err := c.cc.Invoke(ctx, "/infinimesh.api.Objects/DeleteObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ObjectsServer is the server API for Objects service.
type ObjectsServer interface {
	ListObjects(context.Context, *ListObjectsRequest) (*nodepb.ListObjectsResponse, error)
	CreateObject(context.Context, *CreateObjectRequest) (*nodepb.Object, error)
	DeleteObject(context.Context, *nodepb.DeleteObjectRequest) (*nodepb.DeleteObjectResponse, error)
}

func RegisterObjectsServer(s *grpc.Server, srv ObjectsServer) {
	s.RegisterService(&_Objects_serviceDesc, srv)
}

func _Objects_ListObjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListObjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectsServer).ListObjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infinimesh.api.Objects/ListObjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectsServer).ListObjects(ctx, req.(*ListObjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Objects_CreateObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectsServer).CreateObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infinimesh.api.Objects/CreateObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectsServer).CreateObject(ctx, req.(*CreateObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Objects_DeleteObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(nodepb.DeleteObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectsServer).DeleteObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infinimesh.api.Objects/DeleteObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectsServer).DeleteObject(ctx, req.(*nodepb.DeleteObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Objects_serviceDesc = grpc.ServiceDesc{
	ServiceName: "infinimesh.api.Objects",
	HandlerType: (*ObjectsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListObjects",
			Handler:    _Objects_ListObjects_Handler,
		},
		{
			MethodName: "CreateObject",
			Handler:    _Objects_CreateObject_Handler,
		},
		{
			MethodName: "DeleteObject",
			Handler:    _Objects_DeleteObject_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/apiserver/apipb/api.proto",
}

// NamespacesClient is the client API for Namespaces service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NamespacesClient interface {
	CreateNamespace(ctx context.Context, in *nodepb.CreateNamespaceRequest, opts ...grpc.CallOption) (*nodepb.Namespace, error)
	GetNamespace(ctx context.Context, in *nodepb.GetNamespaceRequest, opts ...grpc.CallOption) (*nodepb.Namespace, error)
	ListNamespaces(ctx context.Context, in *nodepb.ListNamespacesRequest, opts ...grpc.CallOption) (*nodepb.ListNamespacesResponse, error)
}

type namespacesClient struct {
	cc *grpc.ClientConn
}

func NewNamespacesClient(cc *grpc.ClientConn) NamespacesClient {
	return &namespacesClient{cc}
}

func (c *namespacesClient) CreateNamespace(ctx context.Context, in *nodepb.CreateNamespaceRequest, opts ...grpc.CallOption) (*nodepb.Namespace, error) {
	out := new(nodepb.Namespace)
	err := c.cc.Invoke(ctx, "/infinimesh.api.Namespaces/CreateNamespace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespacesClient) GetNamespace(ctx context.Context, in *nodepb.GetNamespaceRequest, opts ...grpc.CallOption) (*nodepb.Namespace, error) {
	out := new(nodepb.Namespace)
	err := c.cc.Invoke(ctx, "/infinimesh.api.Namespaces/GetNamespace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespacesClient) ListNamespaces(ctx context.Context, in *nodepb.ListNamespacesRequest, opts ...grpc.CallOption) (*nodepb.ListNamespacesResponse, error) {
	out := new(nodepb.ListNamespacesResponse)
	err := c.cc.Invoke(ctx, "/infinimesh.api.Namespaces/ListNamespaces", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NamespacesServer is the server API for Namespaces service.
type NamespacesServer interface {
	CreateNamespace(context.Context, *nodepb.CreateNamespaceRequest) (*nodepb.Namespace, error)
	GetNamespace(context.Context, *nodepb.GetNamespaceRequest) (*nodepb.Namespace, error)
	ListNamespaces(context.Context, *nodepb.ListNamespacesRequest) (*nodepb.ListNamespacesResponse, error)
}

func RegisterNamespacesServer(s *grpc.Server, srv NamespacesServer) {
	s.RegisterService(&_Namespaces_serviceDesc, srv)
}

func _Namespaces_CreateNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(nodepb.CreateNamespaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamespacesServer).CreateNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infinimesh.api.Namespaces/CreateNamespace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamespacesServer).CreateNamespace(ctx, req.(*nodepb.CreateNamespaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Namespaces_GetNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(nodepb.GetNamespaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamespacesServer).GetNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infinimesh.api.Namespaces/GetNamespace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamespacesServer).GetNamespace(ctx, req.(*nodepb.GetNamespaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Namespaces_ListNamespaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(nodepb.ListNamespacesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamespacesServer).ListNamespaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infinimesh.api.Namespaces/ListNamespaces",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamespacesServer).ListNamespaces(ctx, req.(*nodepb.ListNamespacesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Namespaces_serviceDesc = grpc.ServiceDesc{
	ServiceName: "infinimesh.api.Namespaces",
	HandlerType: (*NamespacesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateNamespace",
			Handler:    _Namespaces_CreateNamespace_Handler,
		},
		{
			MethodName: "GetNamespace",
			Handler:    _Namespaces_GetNamespace_Handler,
		},
		{
			MethodName: "ListNamespaces",
			Handler:    _Namespaces_ListNamespaces_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/apiserver/apipb/api.proto",
}
