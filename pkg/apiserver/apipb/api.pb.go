// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pkg/apiserver/apipb/api.proto

package apipb

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	registrypb "github.com/infinimesh/infinimesh/pkg/registry/registrypb"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

func init() { proto.RegisterFile("pkg/apiserver/apipb/api.proto", fileDescriptor_06a22a27722afd30) }

var fileDescriptor_06a22a27722afd30 = []byte{
	// 222 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x2d, 0xc8, 0x4e, 0xd7,
	0x4f, 0x2c, 0xc8, 0x2c, 0x4e, 0x2d, 0x2a, 0x4b, 0x2d, 0x02, 0xb1, 0x0a, 0x92, 0x40, 0xa4, 0x5e,
	0x41, 0x51, 0x7e, 0x49, 0xbe, 0x10, 0x5f, 0x66, 0x5e, 0x5a, 0x66, 0x5e, 0x66, 0x6e, 0x6a, 0x71,
	0x86, 0x5e, 0x62, 0x41, 0xa6, 0x94, 0x2e, 0x48, 0x79, 0x51, 0x6a, 0x7a, 0x66, 0x71, 0x49, 0x51,
	0x25, 0x9c, 0x51, 0x90, 0xa4, 0x9f, 0x92, 0x5a, 0x96, 0x99, 0x9c, 0x1a, 0x0f, 0x13, 0x81, 0x68,
	0x37, 0xea, 0x67, 0xe6, 0x62, 0x77, 0x01, 0xcb, 0x14, 0x0b, 0xc5, 0x72, 0xb1, 0x39, 0x17, 0xa5,
	0x26, 0x96, 0xa4, 0x0a, 0x69, 0xe8, 0x21, 0x99, 0x0a, 0xd1, 0x08, 0xd7, 0x07, 0x51, 0x12, 0x94,
	0x5a, 0x58, 0x9a, 0x5a, 0x5c, 0x22, 0xa5, 0x49, 0x84, 0xca, 0xe2, 0x82, 0xfc, 0xbc, 0xe2, 0x54,
	0xa1, 0x34, 0x2e, 0x4e, 0xf7, 0xd4, 0x12, 0xa7, 0x4a, 0xbf, 0xc4, 0xdc, 0x54, 0x21, 0x6d, 0x3c,
	0xfa, 0xe0, 0xaa, 0x60, 0x96, 0xe8, 0x10, 0xa7, 0x18, 0x6a, 0x4f, 0x1c, 0x17, 0x8b, 0x4f, 0x66,
	0x71, 0x89, 0x90, 0x2e, 0x1e, 0x5d, 0x20, 0x05, 0x50, 0x6f, 0xc3, 0x2c, 0x51, 0x27, 0xa0, 0x1c,
	0x6e, 0x7e, 0x2c, 0x17, 0x9b, 0x4b, 0x6a, 0x4e, 0x2a, 0x81, 0x60, 0x82, 0x28, 0x21, 0x26, 0x98,
	0x60, 0x2a, 0x21, 0xc6, 0x3b, 0xb1, 0x47, 0xb1, 0x82, 0xe3, 0x38, 0x89, 0x0d, 0x1c, 0x43, 0xc6,
	0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x47, 0x6c, 0x74, 0x87, 0x01, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DevicesClient is the client API for Devices service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DevicesClient interface {
	Create(ctx context.Context, in *registrypb.CreateRequest, opts ...grpc.CallOption) (*registrypb.CreateResponse, error)
	GetByName(ctx context.Context, in *registrypb.GetByNameRequest, opts ...grpc.CallOption) (*registrypb.GetByNameResponse, error)
	List(ctx context.Context, in *registrypb.ListDevicesRequest, opts ...grpc.CallOption) (*registrypb.ListResponse, error)
	Delete(ctx context.Context, in *registrypb.DeleteRequest, opts ...grpc.CallOption) (*registrypb.DeleteResponse, error)
}

type devicesClient struct {
	cc *grpc.ClientConn
}

func NewDevicesClient(cc *grpc.ClientConn) DevicesClient {
	return &devicesClient{cc}
}

func (c *devicesClient) Create(ctx context.Context, in *registrypb.CreateRequest, opts ...grpc.CallOption) (*registrypb.CreateResponse, error) {
	out := new(registrypb.CreateResponse)
	err := c.cc.Invoke(ctx, "/infinimesh.api.Devices/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devicesClient) GetByName(ctx context.Context, in *registrypb.GetByNameRequest, opts ...grpc.CallOption) (*registrypb.GetByNameResponse, error) {
	out := new(registrypb.GetByNameResponse)
	err := c.cc.Invoke(ctx, "/infinimesh.api.Devices/GetByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devicesClient) List(ctx context.Context, in *registrypb.ListDevicesRequest, opts ...grpc.CallOption) (*registrypb.ListResponse, error) {
	out := new(registrypb.ListResponse)
	err := c.cc.Invoke(ctx, "/infinimesh.api.Devices/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devicesClient) Delete(ctx context.Context, in *registrypb.DeleteRequest, opts ...grpc.CallOption) (*registrypb.DeleteResponse, error) {
	out := new(registrypb.DeleteResponse)
	err := c.cc.Invoke(ctx, "/infinimesh.api.Devices/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DevicesServer is the server API for Devices service.
type DevicesServer interface {
	Create(context.Context, *registrypb.CreateRequest) (*registrypb.CreateResponse, error)
	GetByName(context.Context, *registrypb.GetByNameRequest) (*registrypb.GetByNameResponse, error)
	List(context.Context, *registrypb.ListDevicesRequest) (*registrypb.ListResponse, error)
	Delete(context.Context, *registrypb.DeleteRequest) (*registrypb.DeleteResponse, error)
}

func RegisterDevicesServer(s *grpc.Server, srv DevicesServer) {
	s.RegisterService(&_Devices_serviceDesc, srv)
}

func _Devices_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(registrypb.CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevicesServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infinimesh.api.Devices/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevicesServer).Create(ctx, req.(*registrypb.CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Devices_GetByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(registrypb.GetByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevicesServer).GetByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infinimesh.api.Devices/GetByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevicesServer).GetByName(ctx, req.(*registrypb.GetByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Devices_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(registrypb.ListDevicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevicesServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infinimesh.api.Devices/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevicesServer).List(ctx, req.(*registrypb.ListDevicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Devices_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(registrypb.DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevicesServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infinimesh.api.Devices/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevicesServer).Delete(ctx, req.(*registrypb.DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Devices_serviceDesc = grpc.ServiceDesc{
	ServiceName: "infinimesh.api.Devices",
	HandlerType: (*DevicesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Devices_Create_Handler,
		},
		{
			MethodName: "GetByName",
			Handler:    _Devices_GetByName_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Devices_List_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Devices_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/apiserver/apipb/api.proto",
}
