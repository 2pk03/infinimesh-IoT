// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	accounts "github.com/infinimesh/infinimesh/pkg/node/proto/accounts"
	devices "github.com/infinimesh/infinimesh/pkg/node/proto/devices"
	namespaces "github.com/infinimesh/infinimesh/pkg/node/proto/namespaces"
	shadowpb "github.com/infinimesh/infinimesh/pkg/shadow/shadowpb"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AccountsServiceClient is the client API for AccountsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AccountsServiceClient interface {
	Token(ctx context.Context, in *TokenRequest, opts ...grpc.CallOption) (*TokenResponse, error)
	Get(ctx context.Context, in *accounts.Account, opts ...grpc.CallOption) (*accounts.Account, error)
	List(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*accounts.AccountsPool, error)
	Create(ctx context.Context, in *accounts.CreateRequest, opts ...grpc.CallOption) (*accounts.CreateResponse, error)
	Update(ctx context.Context, in *accounts.Account, opts ...grpc.CallOption) (*accounts.Account, error)
	Delete(ctx context.Context, in *accounts.Account, opts ...grpc.CallOption) (*DeleteResponse, error)
	SetCredentials(ctx context.Context, in *SetCredentialsRequest, opts ...grpc.CallOption) (*SetCredentialsResponse, error)
}

type accountsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAccountsServiceClient(cc grpc.ClientConnInterface) AccountsServiceClient {
	return &accountsServiceClient{cc}
}

func (c *accountsServiceClient) Token(ctx context.Context, in *TokenRequest, opts ...grpc.CallOption) (*TokenResponse, error) {
	out := new(TokenResponse)
	err := c.cc.Invoke(ctx, "/infinimesh.node.AccountsService/Token", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsServiceClient) Get(ctx context.Context, in *accounts.Account, opts ...grpc.CallOption) (*accounts.Account, error) {
	out := new(accounts.Account)
	err := c.cc.Invoke(ctx, "/infinimesh.node.AccountsService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsServiceClient) List(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*accounts.AccountsPool, error) {
	out := new(accounts.AccountsPool)
	err := c.cc.Invoke(ctx, "/infinimesh.node.AccountsService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsServiceClient) Create(ctx context.Context, in *accounts.CreateRequest, opts ...grpc.CallOption) (*accounts.CreateResponse, error) {
	out := new(accounts.CreateResponse)
	err := c.cc.Invoke(ctx, "/infinimesh.node.AccountsService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsServiceClient) Update(ctx context.Context, in *accounts.Account, opts ...grpc.CallOption) (*accounts.Account, error) {
	out := new(accounts.Account)
	err := c.cc.Invoke(ctx, "/infinimesh.node.AccountsService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsServiceClient) Delete(ctx context.Context, in *accounts.Account, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, "/infinimesh.node.AccountsService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsServiceClient) SetCredentials(ctx context.Context, in *SetCredentialsRequest, opts ...grpc.CallOption) (*SetCredentialsResponse, error) {
	out := new(SetCredentialsResponse)
	err := c.cc.Invoke(ctx, "/infinimesh.node.AccountsService/SetCredentials", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccountsServiceServer is the server API for AccountsService service.
// All implementations must embed UnimplementedAccountsServiceServer
// for forward compatibility
type AccountsServiceServer interface {
	Token(context.Context, *TokenRequest) (*TokenResponse, error)
	Get(context.Context, *accounts.Account) (*accounts.Account, error)
	List(context.Context, *EmptyMessage) (*accounts.AccountsPool, error)
	Create(context.Context, *accounts.CreateRequest) (*accounts.CreateResponse, error)
	Update(context.Context, *accounts.Account) (*accounts.Account, error)
	Delete(context.Context, *accounts.Account) (*DeleteResponse, error)
	SetCredentials(context.Context, *SetCredentialsRequest) (*SetCredentialsResponse, error)
	mustEmbedUnimplementedAccountsServiceServer()
}

// UnimplementedAccountsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAccountsServiceServer struct {
}

func (UnimplementedAccountsServiceServer) Token(context.Context, *TokenRequest) (*TokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Token not implemented")
}
func (UnimplementedAccountsServiceServer) Get(context.Context, *accounts.Account) (*accounts.Account, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedAccountsServiceServer) List(context.Context, *EmptyMessage) (*accounts.AccountsPool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedAccountsServiceServer) Create(context.Context, *accounts.CreateRequest) (*accounts.CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedAccountsServiceServer) Update(context.Context, *accounts.Account) (*accounts.Account, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedAccountsServiceServer) Delete(context.Context, *accounts.Account) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedAccountsServiceServer) SetCredentials(context.Context, *SetCredentialsRequest) (*SetCredentialsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetCredentials not implemented")
}
func (UnimplementedAccountsServiceServer) mustEmbedUnimplementedAccountsServiceServer() {}

// UnsafeAccountsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccountsServiceServer will
// result in compilation errors.
type UnsafeAccountsServiceServer interface {
	mustEmbedUnimplementedAccountsServiceServer()
}

func RegisterAccountsServiceServer(s grpc.ServiceRegistrar, srv AccountsServiceServer) {
	s.RegisterService(&AccountsService_ServiceDesc, srv)
}

func _AccountsService_Token_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsServiceServer).Token(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infinimesh.node.AccountsService/Token",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsServiceServer).Token(ctx, req.(*TokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountsService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(accounts.Account)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infinimesh.node.AccountsService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsServiceServer).Get(ctx, req.(*accounts.Account))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountsService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infinimesh.node.AccountsService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsServiceServer).List(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountsService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(accounts.CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infinimesh.node.AccountsService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsServiceServer).Create(ctx, req.(*accounts.CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountsService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(accounts.Account)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infinimesh.node.AccountsService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsServiceServer).Update(ctx, req.(*accounts.Account))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountsService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(accounts.Account)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infinimesh.node.AccountsService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsServiceServer).Delete(ctx, req.(*accounts.Account))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountsService_SetCredentials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetCredentialsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsServiceServer).SetCredentials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infinimesh.node.AccountsService/SetCredentials",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsServiceServer).SetCredentials(ctx, req.(*SetCredentialsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AccountsService_ServiceDesc is the grpc.ServiceDesc for AccountsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AccountsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "infinimesh.node.AccountsService",
	HandlerType: (*AccountsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Token",
			Handler:    _AccountsService_Token_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _AccountsService_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _AccountsService_List_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _AccountsService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _AccountsService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _AccountsService_Delete_Handler,
		},
		{
			MethodName: "SetCredentials",
			Handler:    _AccountsService_SetCredentials_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/node/proto/node.proto",
}

// NamespacesServiceClient is the client API for NamespacesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NamespacesServiceClient interface {
	Get(ctx context.Context, in *namespaces.Namespace, opts ...grpc.CallOption) (*namespaces.Namespace, error)
	List(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*namespaces.NamespacesPool, error)
	Create(ctx context.Context, in *namespaces.Namespace, opts ...grpc.CallOption) (*namespaces.Namespace, error)
	Update(ctx context.Context, in *namespaces.Namespace, opts ...grpc.CallOption) (*namespaces.Namespace, error)
	Delete(ctx context.Context, in *namespaces.Namespace, opts ...grpc.CallOption) (*DeleteResponse, error)
}

type namespacesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNamespacesServiceClient(cc grpc.ClientConnInterface) NamespacesServiceClient {
	return &namespacesServiceClient{cc}
}

func (c *namespacesServiceClient) Get(ctx context.Context, in *namespaces.Namespace, opts ...grpc.CallOption) (*namespaces.Namespace, error) {
	out := new(namespaces.Namespace)
	err := c.cc.Invoke(ctx, "/infinimesh.node.NamespacesService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespacesServiceClient) List(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*namespaces.NamespacesPool, error) {
	out := new(namespaces.NamespacesPool)
	err := c.cc.Invoke(ctx, "/infinimesh.node.NamespacesService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespacesServiceClient) Create(ctx context.Context, in *namespaces.Namespace, opts ...grpc.CallOption) (*namespaces.Namespace, error) {
	out := new(namespaces.Namespace)
	err := c.cc.Invoke(ctx, "/infinimesh.node.NamespacesService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespacesServiceClient) Update(ctx context.Context, in *namespaces.Namespace, opts ...grpc.CallOption) (*namespaces.Namespace, error) {
	out := new(namespaces.Namespace)
	err := c.cc.Invoke(ctx, "/infinimesh.node.NamespacesService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespacesServiceClient) Delete(ctx context.Context, in *namespaces.Namespace, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, "/infinimesh.node.NamespacesService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NamespacesServiceServer is the server API for NamespacesService service.
// All implementations must embed UnimplementedNamespacesServiceServer
// for forward compatibility
type NamespacesServiceServer interface {
	Get(context.Context, *namespaces.Namespace) (*namespaces.Namespace, error)
	List(context.Context, *EmptyMessage) (*namespaces.NamespacesPool, error)
	Create(context.Context, *namespaces.Namespace) (*namespaces.Namespace, error)
	Update(context.Context, *namespaces.Namespace) (*namespaces.Namespace, error)
	Delete(context.Context, *namespaces.Namespace) (*DeleteResponse, error)
	mustEmbedUnimplementedNamespacesServiceServer()
}

// UnimplementedNamespacesServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNamespacesServiceServer struct {
}

func (UnimplementedNamespacesServiceServer) Get(context.Context, *namespaces.Namespace) (*namespaces.Namespace, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedNamespacesServiceServer) List(context.Context, *EmptyMessage) (*namespaces.NamespacesPool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedNamespacesServiceServer) Create(context.Context, *namespaces.Namespace) (*namespaces.Namespace, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedNamespacesServiceServer) Update(context.Context, *namespaces.Namespace) (*namespaces.Namespace, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedNamespacesServiceServer) Delete(context.Context, *namespaces.Namespace) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedNamespacesServiceServer) mustEmbedUnimplementedNamespacesServiceServer() {}

// UnsafeNamespacesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NamespacesServiceServer will
// result in compilation errors.
type UnsafeNamespacesServiceServer interface {
	mustEmbedUnimplementedNamespacesServiceServer()
}

func RegisterNamespacesServiceServer(s grpc.ServiceRegistrar, srv NamespacesServiceServer) {
	s.RegisterService(&NamespacesService_ServiceDesc, srv)
}

func _NamespacesService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(namespaces.Namespace)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamespacesServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infinimesh.node.NamespacesService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamespacesServiceServer).Get(ctx, req.(*namespaces.Namespace))
	}
	return interceptor(ctx, in, info, handler)
}

func _NamespacesService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamespacesServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infinimesh.node.NamespacesService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamespacesServiceServer).List(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _NamespacesService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(namespaces.Namespace)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamespacesServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infinimesh.node.NamespacesService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamespacesServiceServer).Create(ctx, req.(*namespaces.Namespace))
	}
	return interceptor(ctx, in, info, handler)
}

func _NamespacesService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(namespaces.Namespace)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamespacesServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infinimesh.node.NamespacesService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamespacesServiceServer).Update(ctx, req.(*namespaces.Namespace))
	}
	return interceptor(ctx, in, info, handler)
}

func _NamespacesService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(namespaces.Namespace)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamespacesServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infinimesh.node.NamespacesService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamespacesServiceServer).Delete(ctx, req.(*namespaces.Namespace))
	}
	return interceptor(ctx, in, info, handler)
}

// NamespacesService_ServiceDesc is the grpc.ServiceDesc for NamespacesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NamespacesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "infinimesh.node.NamespacesService",
	HandlerType: (*NamespacesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _NamespacesService_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _NamespacesService_List_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _NamespacesService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _NamespacesService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _NamespacesService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/node/proto/node.proto",
}

// DevicesServiceClient is the client API for DevicesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DevicesServiceClient interface {
	Get(ctx context.Context, in *devices.Device, opts ...grpc.CallOption) (*devices.Device, error)
	List(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*devices.DevicesPool, error)
	Create(ctx context.Context, in *devices.CreateRequest, opts ...grpc.CallOption) (*devices.CreateResponse, error)
	Update(ctx context.Context, in *devices.Device, opts ...grpc.CallOption) (*devices.Device, error)
	Delete(ctx context.Context, in *devices.Device, opts ...grpc.CallOption) (*DeleteResponse, error)
	MakeDevicesToken(ctx context.Context, in *DevicesTokenRequest, opts ...grpc.CallOption) (*TokenResponse, error)
	GetByToken(ctx context.Context, in *devices.Device, opts ...grpc.CallOption) (*devices.Device, error)
	GetByFingerprint(ctx context.Context, in *devices.GetByFingerprintRequest, opts ...grpc.CallOption) (*devices.Device, error)
}

type devicesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDevicesServiceClient(cc grpc.ClientConnInterface) DevicesServiceClient {
	return &devicesServiceClient{cc}
}

func (c *devicesServiceClient) Get(ctx context.Context, in *devices.Device, opts ...grpc.CallOption) (*devices.Device, error) {
	out := new(devices.Device)
	err := c.cc.Invoke(ctx, "/infinimesh.node.DevicesService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devicesServiceClient) List(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*devices.DevicesPool, error) {
	out := new(devices.DevicesPool)
	err := c.cc.Invoke(ctx, "/infinimesh.node.DevicesService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devicesServiceClient) Create(ctx context.Context, in *devices.CreateRequest, opts ...grpc.CallOption) (*devices.CreateResponse, error) {
	out := new(devices.CreateResponse)
	err := c.cc.Invoke(ctx, "/infinimesh.node.DevicesService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devicesServiceClient) Update(ctx context.Context, in *devices.Device, opts ...grpc.CallOption) (*devices.Device, error) {
	out := new(devices.Device)
	err := c.cc.Invoke(ctx, "/infinimesh.node.DevicesService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devicesServiceClient) Delete(ctx context.Context, in *devices.Device, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, "/infinimesh.node.DevicesService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devicesServiceClient) MakeDevicesToken(ctx context.Context, in *DevicesTokenRequest, opts ...grpc.CallOption) (*TokenResponse, error) {
	out := new(TokenResponse)
	err := c.cc.Invoke(ctx, "/infinimesh.node.DevicesService/MakeDevicesToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devicesServiceClient) GetByToken(ctx context.Context, in *devices.Device, opts ...grpc.CallOption) (*devices.Device, error) {
	out := new(devices.Device)
	err := c.cc.Invoke(ctx, "/infinimesh.node.DevicesService/GetByToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devicesServiceClient) GetByFingerprint(ctx context.Context, in *devices.GetByFingerprintRequest, opts ...grpc.CallOption) (*devices.Device, error) {
	out := new(devices.Device)
	err := c.cc.Invoke(ctx, "/infinimesh.node.DevicesService/GetByFingerprint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DevicesServiceServer is the server API for DevicesService service.
// All implementations must embed UnimplementedDevicesServiceServer
// for forward compatibility
type DevicesServiceServer interface {
	Get(context.Context, *devices.Device) (*devices.Device, error)
	List(context.Context, *EmptyMessage) (*devices.DevicesPool, error)
	Create(context.Context, *devices.CreateRequest) (*devices.CreateResponse, error)
	Update(context.Context, *devices.Device) (*devices.Device, error)
	Delete(context.Context, *devices.Device) (*DeleteResponse, error)
	MakeDevicesToken(context.Context, *DevicesTokenRequest) (*TokenResponse, error)
	GetByToken(context.Context, *devices.Device) (*devices.Device, error)
	GetByFingerprint(context.Context, *devices.GetByFingerprintRequest) (*devices.Device, error)
	mustEmbedUnimplementedDevicesServiceServer()
}

// UnimplementedDevicesServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDevicesServiceServer struct {
}

func (UnimplementedDevicesServiceServer) Get(context.Context, *devices.Device) (*devices.Device, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedDevicesServiceServer) List(context.Context, *EmptyMessage) (*devices.DevicesPool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedDevicesServiceServer) Create(context.Context, *devices.CreateRequest) (*devices.CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedDevicesServiceServer) Update(context.Context, *devices.Device) (*devices.Device, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedDevicesServiceServer) Delete(context.Context, *devices.Device) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedDevicesServiceServer) MakeDevicesToken(context.Context, *DevicesTokenRequest) (*TokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MakeDevicesToken not implemented")
}
func (UnimplementedDevicesServiceServer) GetByToken(context.Context, *devices.Device) (*devices.Device, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByToken not implemented")
}
func (UnimplementedDevicesServiceServer) GetByFingerprint(context.Context, *devices.GetByFingerprintRequest) (*devices.Device, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByFingerprint not implemented")
}
func (UnimplementedDevicesServiceServer) mustEmbedUnimplementedDevicesServiceServer() {}

// UnsafeDevicesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DevicesServiceServer will
// result in compilation errors.
type UnsafeDevicesServiceServer interface {
	mustEmbedUnimplementedDevicesServiceServer()
}

func RegisterDevicesServiceServer(s grpc.ServiceRegistrar, srv DevicesServiceServer) {
	s.RegisterService(&DevicesService_ServiceDesc, srv)
}

func _DevicesService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(devices.Device)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevicesServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infinimesh.node.DevicesService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevicesServiceServer).Get(ctx, req.(*devices.Device))
	}
	return interceptor(ctx, in, info, handler)
}

func _DevicesService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevicesServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infinimesh.node.DevicesService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevicesServiceServer).List(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _DevicesService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(devices.CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevicesServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infinimesh.node.DevicesService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevicesServiceServer).Create(ctx, req.(*devices.CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DevicesService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(devices.Device)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevicesServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infinimesh.node.DevicesService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevicesServiceServer).Update(ctx, req.(*devices.Device))
	}
	return interceptor(ctx, in, info, handler)
}

func _DevicesService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(devices.Device)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevicesServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infinimesh.node.DevicesService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevicesServiceServer).Delete(ctx, req.(*devices.Device))
	}
	return interceptor(ctx, in, info, handler)
}

func _DevicesService_MakeDevicesToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DevicesTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevicesServiceServer).MakeDevicesToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infinimesh.node.DevicesService/MakeDevicesToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevicesServiceServer).MakeDevicesToken(ctx, req.(*DevicesTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DevicesService_GetByToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(devices.Device)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevicesServiceServer).GetByToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infinimesh.node.DevicesService/GetByToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevicesServiceServer).GetByToken(ctx, req.(*devices.Device))
	}
	return interceptor(ctx, in, info, handler)
}

func _DevicesService_GetByFingerprint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(devices.GetByFingerprintRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevicesServiceServer).GetByFingerprint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infinimesh.node.DevicesService/GetByFingerprint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevicesServiceServer).GetByFingerprint(ctx, req.(*devices.GetByFingerprintRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DevicesService_ServiceDesc is the grpc.ServiceDesc for DevicesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DevicesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "infinimesh.node.DevicesService",
	HandlerType: (*DevicesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _DevicesService_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _DevicesService_List_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _DevicesService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _DevicesService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _DevicesService_Delete_Handler,
		},
		{
			MethodName: "MakeDevicesToken",
			Handler:    _DevicesService_MakeDevicesToken_Handler,
		},
		{
			MethodName: "GetByToken",
			Handler:    _DevicesService_GetByToken_Handler,
		},
		{
			MethodName: "GetByFingerprint",
			Handler:    _DevicesService_GetByFingerprint_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/node/proto/node.proto",
}

// ShadowServiceClient is the client API for ShadowService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShadowServiceClient interface {
	Get(ctx context.Context, in *shadowpb.GetRequest, opts ...grpc.CallOption) (*shadowpb.GetResponse, error)
	GetMultiple(ctx context.Context, in *shadowpb.Empty, opts ...grpc.CallOption) (*shadowpb.GetMultipleResponse, error)
	PatchDesiredState(ctx context.Context, in *shadowpb.PatchDesiredStateRequest, opts ...grpc.CallOption) (*shadowpb.PatchDesiredStateResponse, error)
	StreamReportedStateChanges(ctx context.Context, in *shadowpb.StreamReportedStateChangesRequest, opts ...grpc.CallOption) (ShadowService_StreamReportedStateChangesClient, error)
}

type shadowServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewShadowServiceClient(cc grpc.ClientConnInterface) ShadowServiceClient {
	return &shadowServiceClient{cc}
}

func (c *shadowServiceClient) Get(ctx context.Context, in *shadowpb.GetRequest, opts ...grpc.CallOption) (*shadowpb.GetResponse, error) {
	out := new(shadowpb.GetResponse)
	err := c.cc.Invoke(ctx, "/infinimesh.node.ShadowService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shadowServiceClient) GetMultiple(ctx context.Context, in *shadowpb.Empty, opts ...grpc.CallOption) (*shadowpb.GetMultipleResponse, error) {
	out := new(shadowpb.GetMultipleResponse)
	err := c.cc.Invoke(ctx, "/infinimesh.node.ShadowService/GetMultiple", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shadowServiceClient) PatchDesiredState(ctx context.Context, in *shadowpb.PatchDesiredStateRequest, opts ...grpc.CallOption) (*shadowpb.PatchDesiredStateResponse, error) {
	out := new(shadowpb.PatchDesiredStateResponse)
	err := c.cc.Invoke(ctx, "/infinimesh.node.ShadowService/PatchDesiredState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shadowServiceClient) StreamReportedStateChanges(ctx context.Context, in *shadowpb.StreamReportedStateChangesRequest, opts ...grpc.CallOption) (ShadowService_StreamReportedStateChangesClient, error) {
	stream, err := c.cc.NewStream(ctx, &ShadowService_ServiceDesc.Streams[0], "/infinimesh.node.ShadowService/StreamReportedStateChanges", opts...)
	if err != nil {
		return nil, err
	}
	x := &shadowServiceStreamReportedStateChangesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ShadowService_StreamReportedStateChangesClient interface {
	Recv() (*shadowpb.StreamReportedStateChangesResponse, error)
	grpc.ClientStream
}

type shadowServiceStreamReportedStateChangesClient struct {
	grpc.ClientStream
}

func (x *shadowServiceStreamReportedStateChangesClient) Recv() (*shadowpb.StreamReportedStateChangesResponse, error) {
	m := new(shadowpb.StreamReportedStateChangesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ShadowServiceServer is the server API for ShadowService service.
// All implementations must embed UnimplementedShadowServiceServer
// for forward compatibility
type ShadowServiceServer interface {
	Get(context.Context, *shadowpb.GetRequest) (*shadowpb.GetResponse, error)
	GetMultiple(context.Context, *shadowpb.Empty) (*shadowpb.GetMultipleResponse, error)
	PatchDesiredState(context.Context, *shadowpb.PatchDesiredStateRequest) (*shadowpb.PatchDesiredStateResponse, error)
	StreamReportedStateChanges(*shadowpb.StreamReportedStateChangesRequest, ShadowService_StreamReportedStateChangesServer) error
	mustEmbedUnimplementedShadowServiceServer()
}

// UnimplementedShadowServiceServer must be embedded to have forward compatible implementations.
type UnimplementedShadowServiceServer struct {
}

func (UnimplementedShadowServiceServer) Get(context.Context, *shadowpb.GetRequest) (*shadowpb.GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedShadowServiceServer) GetMultiple(context.Context, *shadowpb.Empty) (*shadowpb.GetMultipleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMultiple not implemented")
}
func (UnimplementedShadowServiceServer) PatchDesiredState(context.Context, *shadowpb.PatchDesiredStateRequest) (*shadowpb.PatchDesiredStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchDesiredState not implemented")
}
func (UnimplementedShadowServiceServer) StreamReportedStateChanges(*shadowpb.StreamReportedStateChangesRequest, ShadowService_StreamReportedStateChangesServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamReportedStateChanges not implemented")
}
func (UnimplementedShadowServiceServer) mustEmbedUnimplementedShadowServiceServer() {}

// UnsafeShadowServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShadowServiceServer will
// result in compilation errors.
type UnsafeShadowServiceServer interface {
	mustEmbedUnimplementedShadowServiceServer()
}

func RegisterShadowServiceServer(s grpc.ServiceRegistrar, srv ShadowServiceServer) {
	s.RegisterService(&ShadowService_ServiceDesc, srv)
}

func _ShadowService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(shadowpb.GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShadowServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infinimesh.node.ShadowService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShadowServiceServer).Get(ctx, req.(*shadowpb.GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShadowService_GetMultiple_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(shadowpb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShadowServiceServer).GetMultiple(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infinimesh.node.ShadowService/GetMultiple",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShadowServiceServer).GetMultiple(ctx, req.(*shadowpb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShadowService_PatchDesiredState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(shadowpb.PatchDesiredStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShadowServiceServer).PatchDesiredState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infinimesh.node.ShadowService/PatchDesiredState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShadowServiceServer).PatchDesiredState(ctx, req.(*shadowpb.PatchDesiredStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShadowService_StreamReportedStateChanges_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(shadowpb.StreamReportedStateChangesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ShadowServiceServer).StreamReportedStateChanges(m, &shadowServiceStreamReportedStateChangesServer{stream})
}

type ShadowService_StreamReportedStateChangesServer interface {
	Send(*shadowpb.StreamReportedStateChangesResponse) error
	grpc.ServerStream
}

type shadowServiceStreamReportedStateChangesServer struct {
	grpc.ServerStream
}

func (x *shadowServiceStreamReportedStateChangesServer) Send(m *shadowpb.StreamReportedStateChangesResponse) error {
	return x.ServerStream.SendMsg(m)
}

// ShadowService_ServiceDesc is the grpc.ServiceDesc for ShadowService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ShadowService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "infinimesh.node.ShadowService",
	HandlerType: (*ShadowServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _ShadowService_Get_Handler,
		},
		{
			MethodName: "GetMultiple",
			Handler:    _ShadowService_GetMultiple_Handler,
		},
		{
			MethodName: "PatchDesiredState",
			Handler:    _ShadowService_PatchDesiredState_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamReportedStateChanges",
			Handler:       _ShadowService_StreamReportedStateChanges_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pkg/node/proto/node.proto",
}
