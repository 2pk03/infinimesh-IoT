// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package repopb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ReposClient is the client API for Repos service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReposClient interface {
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	SetDeviceState(ctx context.Context, in *SetDeviceStateRequest, opts ...grpc.CallOption) (*SetDeviceStateResponse, error)
	DeleteDeviceState(ctx context.Context, in *DeleteDeviceStateRequest, opts ...grpc.CallOption) (*DeleteDeviceStateResponse, error)
}

type reposClient struct {
	cc grpc.ClientConnInterface
}

func NewReposClient(cc grpc.ClientConnInterface) ReposClient {
	return &reposClient{cc}
}

func (c *reposClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, "/pkg.repo.repopb.Repos/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reposClient) SetDeviceState(ctx context.Context, in *SetDeviceStateRequest, opts ...grpc.CallOption) (*SetDeviceStateResponse, error) {
	out := new(SetDeviceStateResponse)
	err := c.cc.Invoke(ctx, "/pkg.repo.repopb.Repos/SetDeviceState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reposClient) DeleteDeviceState(ctx context.Context, in *DeleteDeviceStateRequest, opts ...grpc.CallOption) (*DeleteDeviceStateResponse, error) {
	out := new(DeleteDeviceStateResponse)
	err := c.cc.Invoke(ctx, "/pkg.repo.repopb.Repos/DeleteDeviceState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReposServer is the server API for Repos service.
// All implementations must embed UnimplementedReposServer
// for forward compatibility
type ReposServer interface {
	Get(context.Context, *GetRequest) (*GetResponse, error)
	SetDeviceState(context.Context, *SetDeviceStateRequest) (*SetDeviceStateResponse, error)
	DeleteDeviceState(context.Context, *DeleteDeviceStateRequest) (*DeleteDeviceStateResponse, error)
	mustEmbedUnimplementedReposServer()
}

// UnimplementedReposServer must be embedded to have forward compatible implementations.
type UnimplementedReposServer struct {
}

func (UnimplementedReposServer) Get(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedReposServer) SetDeviceState(context.Context, *SetDeviceStateRequest) (*SetDeviceStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDeviceState not implemented")
}
func (UnimplementedReposServer) DeleteDeviceState(context.Context, *DeleteDeviceStateRequest) (*DeleteDeviceStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDeviceState not implemented")
}
func (UnimplementedReposServer) mustEmbedUnimplementedReposServer() {}

// UnsafeReposServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReposServer will
// result in compilation errors.
type UnsafeReposServer interface {
	mustEmbedUnimplementedReposServer()
}

func RegisterReposServer(s grpc.ServiceRegistrar, srv ReposServer) {
	s.RegisterService(&Repos_ServiceDesc, srv)
}

func _Repos_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReposServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pkg.repo.repopb.Repos/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReposServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Repos_SetDeviceState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDeviceStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReposServer).SetDeviceState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pkg.repo.repopb.Repos/SetDeviceState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReposServer).SetDeviceState(ctx, req.(*SetDeviceStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Repos_DeleteDeviceState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDeviceStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReposServer).DeleteDeviceState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pkg.repo.repopb.Repos/DeleteDeviceState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReposServer).DeleteDeviceState(ctx, req.(*DeleteDeviceStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Repos_ServiceDesc is the grpc.ServiceDesc for Repos service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Repos_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pkg.repo.repopb.Repos",
	HandlerType: (*ReposServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _Repos_Get_Handler,
		},
		{
			MethodName: "SetDeviceState",
			Handler:    _Repos_SetDeviceState_Handler,
		},
		{
			MethodName: "DeleteDeviceState",
			Handler:    _Repos_DeleteDeviceState_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/repo/repopb/repo.proto",
}
