version: "3.2"
services:
  
  proxy:
    image: traefik:latest
    labels:
      - traefik.http.routers.api.rule=Host(`traefik.${BASE_DOMAIN}`)
      - traefik.http.routers.api.service=api@internal
    ports:
      - 80:80
      - 8000:8000
      - 1883:1883
      - 8883:8883
    volumes:
      - ./traefik.yml:/traefik.yml
      - /var/run/docker.sock:/var/run/docker.sock

  web:
    image: ghcr.io/infinimesh/infinimesh/web:latest
    restart: always
    depends_on:
      - repo
      - proxy
    labels:
      - traefik.http.routers.web.rule=Host(`api.${BASE_DOMAIN}`) && PathPrefix("/api")
      - traefik.http.routers.web.entrypoints=http
      - traefik.http.services.web.loadbalancer.server.port=8000
    environment:
      APISERVER_HOST: repo:8080

  rabbitmq:
    image: rabbitmq:3.9-management
    labels:
      - traefik.http.routers.rabbitmq.rule=Host(`rbmq.infinimesh.local`)
      - traefik.http.routers.rabbitmq.entrypoints=http
      - traefik.http.services.rabbitmq.loadbalancer.server.port=15672
    environment:
      RABBITMQ_DEFAULT_USER: "${RABBITMQ_USER}"
      RABBITMQ_DEFAULT_PASS: "${RABBITMQ_PASS}"

  mqtt-bridge:
    image: ghcr.io/infinimesh/infinimesh/mqtt-bridge:latest
    restart: unless-stopped
    depends_on:
      - rabbitmq
      - repo
      - proxy
    labels:
      - traefik.http.routers.mqtt.rule=Host(`mqtt.${BASE_DOMAIN}`)
      - traefik.http.routers.mqtt.entrypoints=mqtt # BasicAuth(non-TLS)
      - traefik.http.services.mqtt.loadbalancer.server.port=1883
      - traefik.http.routers.mqtts.rule=Host(`mqtt.${BASE_DOMAIN}`)
      - traefik.http.routers.mqtts.entrypoints=mqtts  # Standard(TLS)
      - traefik.http.services.mqtts.loadbalancer.server.port=8883
    volumes:
      - $PWD/hack/server.crt:/cert/tls.crt
      - $PWD/hack/server.key:/cert/tls.key
    environment:
      DEBUG: "true"
      RABBITMQ_CONN: amqp://${RABBITMQ_USER}:${RABBITMQ_PASS}@rabbitmq:5672/
      DEVICE_REGISTRY_URL: repo:8080
      SIGNING_KEY: "${SIGNING_KEY}"

  repo:
    image: ghcr.io/infinimesh/infinimesh/repo:latest
    restart: always
    labels:
      - traefik.http.routers.repo.rule=Host(`api.${BASE_DOMAIN}`)
      - traefik.http.routers.repo.entrypoints=grpc
      - traefik.http.services.repo.loadbalancer.server.port=8080
      - traefik.http.services.repo.loadbalancer.server.scheme=h2c
    depends_on:
      - db
      - proxy
    environment:
      DB_HOST: db:8529
      DB_CRED: root:openSesame
      SHADOW_HOST: shadow:8080
      INF_DEFAULT_ROOT_PASS: infinimesh
      SIGNING_KEY: "${SIGNING_KEY}"
  shadow:
    image: ghcr.io/infinimesh/infinimesh/shadow:latest
    restart: unless-stopped
    depends_on:
      - redis
    environment:
      RABBITMQ_CONN: amqp://${RABBITMQ_USER}:${RABBITMQ_PASS}@rabbitmq:5672/
      REDIS_HOST: redis:6379
      
  redis:
    image: redis:latest
    command: ["redis-server", "--appendonly", "yes"]

  db:
    image: arangodb/arangodb:latest
    environment:
      ARANGO_ROOT_PASSWORD: openSesame
    labels:
      - traefik.http.routers.db.rule=Host(`db.${BASE_DOMAIN}`)
      - traefik.http.routers.db.entrypoints=http
      - traefik.http.services.db.loadbalancer.server.port=8529
    volumes:
      - data:/var/lib/arangodb3

volumes:
  data:
